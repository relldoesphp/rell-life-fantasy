<?php
/**
 * Created by IntelliJ IDEA.
 * User: tcook
 * Date: 8/7/19
 * Time: 4:38 PM
 */

namespace Player\Service\Position;


use Player\Model\Player\PlayerCommandInterface;
use Player\Model\Player\PlayerRepositoryInterface;
use Laminas\Db\Adapter\AdapterInterface;
use Laminas\ProgressBar\Adapter\Console;
use Laminas\ProgressBar\ProgressBar;
use Laminas\Db\Sql\Select;
use Laminas\Http\Request;
use Laminas\Http\Client;
use Laminas\Dom\Query;
use Player\Service\SportsInfoApi;

class TeService extends ServiceAbstract
{
    private $consoleAdapter;
    private $repository;
    private $command;
    private $db;
    private $sisApi;

    public $specialMetrics = [
        'move' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'inLine' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'alpha' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'collegeScore' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'slot' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'deep' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'yac' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
    ];

    public function __construct(
        AdapterInterface $db,
        Console $consoleAdapter,
        PlayerCommandInterface $command,
        PlayerRepositoryInterface $repository,
        SportsInfoApi $sisApi
    )
    {
        parent::__construct($db, $consoleAdapter, $command, $repository, $sisApi);
        $this->repository = $repository;
        $this->command = $command;
        $this->consoleAdapter = $consoleAdapter;
        $this->sisApi = $sisApi;
    }

    public function calculateMetrics()
    {
        parent::calculateMetrics("TE"); // TODO: Change the autogenerated stub
    }

    public function calculatePercentiles()
    {
        parent::calculatePercentiles("TE", $this->percentileMetrics); // TODO: Change the autogenerated stub
    }

    public function calculateSpecialPercentiles()
    {
        parent::calculatePercentiles("TE", $this->specialMetrics);
    }

    public function calculateSpecialScores()
    {
        $tes = $this->repository->findAllPlayers("TE");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, count($tes));
        $pointer = 0;
        foreach ($tes as $te) {
            if ($te->getId() == 28158) {
                $gothim = true;
            }

            $te->decodeJson();
//            if (empty($te->getMetrics())) {
//                continue;
//            }
            if ($te->getTeam() == 'Rookie') {
                /*** Make College Score ***/
                if ($te->college_stats != null) {
                    $college = $this->makeCollegeScore($te);
                } else {
                    $college = false;
                }

                if ($college !== false) {
                    $metrics['collegeScore'] = $college['collegeScore'];
                    $metrics['bestSeason'] = $college['bestSeason'];
                    $metrics['breakoutClass'] = $college['breakoutClass'];
                    $metrics['breakoutSeasons'] = $college['breakoutSeasons'];
                    $metrics['collegeSeasons'] = $college['collegeSeasons'];
                    $metrics['bestDominator'] = $college['bestDominator'];
                    $te->setCollegeStats($college['collegeStats']);
//
//                    $metrics['alpha'] = ($metrics['alpha'] * .8) + (($college['collegeScore']/20) * .2);
//                    $metrics['alpha'] = round($metrics['alpha'], 2);
                } else {
                    $metrics['collegeScore'] = null;
                    $metrics['bestSeason'] = null;
                    $metrics['breakoutClass'] = null;
                }

//                $te->setMetrics($metrics);
//                $this->command->save($te);
//                $pointer++;
//                $progressBar->update($pointer);
//                continue;
            }

            $info = $te->getPlayerInfo();
            $metrics = $te->getMetrics();
            $percentiles = $te->getPercentiles();

            if (empty($metrics) || !array_key_exists('benchPress', $metrics)) {
                continue;
            }


            if (in_array($metrics['shuttle'], ["-", "", null])
                && in_array($metrics['cone'], ["-", "", null])) {
                $noAgility = true;
            } else{
                $noAgility = false;
            }

            if (in_array($metrics['verticalJump'], ["-", "", null])
                && in_array($metrics['broadJump'], ["-", "", null])) {
                $noJump = true;
            } else{
                $noJump = false;
            }

            if (in_array($metrics['fortyTime'], ["-", "", null])) {
                $noForty = true;
            } else{
                $noForty = false;
            }

            if (in_array($metrics['benchPress'], ["-", "", null])) {
                $noBench = true;
            } else{
                $noBench = false;
            }

            if (in_array($metrics['verticalJump'], ["-", "", null])) {
                $noVert = true;
            } else {
                $noVert = false;
            }

            if (in_array($metrics['cone'], ["-", "", null])) {
                $noCone = true;
            } else {
                $noCone = false;
            }

            //slot score
            $slot = null;
            if ($noCone) {
                $slot = null;
            } else {
                $slot = round(($percentiles['routeAgility'] * .7) + ($percentiles['jukeAgility'] * .3),2);
            }
            $metrics["slot"] = $slot;

            //deep score
            if ($noForty)  {
                $deep = null;
            } else {
                $deep = round(($percentiles['fortyTime'] * .6) + ($percentiles['jumpball'] * .4), 2);
            }
            $metrics["deep"] = $deep;

            /*** New Move Score ***/
            /*** Calculate Move Score ***/
            //Move - TE Speed + Jumpball + Route Agility
            $data['move'] = null;
            if ($metrics['deep'] != null && $metrics['slot'] != null) {
                $data['move'] = ($metrics['slot'] *.50) + ($metrics['deep'] * .50);
            } else {
                if (array_key_exists('routeAgility', $metrics) && !in_array($metrics['routeAgility'], [null, "-", "", "null"])
                    && !in_array($metrics['fortyTime'], [null, "-", "", "null"]) ) {
                    $data['move'] = ($percentiles['routeAgility'] * .70) + ($percentiles['fortyTime'] * .30);
                }

                if (array_key_exists('routeAgility', $metrics) && !in_array($metrics['routeAgility'], [null, "-", "", "null"])
                    && in_array($metrics['fortyTime'], [null, "-", "", "null"]) ) {
                    $data['move'] = $percentiles['routeAgility'];
                }

                if (array_key_exists('routeAgiltiy', $metrics) && in_array($metrics['routeAgility'], [null, "-", "", "null"])
                    && !in_array($metrics['fortyTime'], [null, "-", "", "null"]) ) {
                    $data['move'] = $percentiles['fortyTime'];
                }

                if (array_key_exists('verticalJump', $metrics) && !in_array($metrics['verticalJump'], [null, "-", "", "null"])) {
                    $data['move'] = ($percentiles['verticalJump'] * .25) + ($data['move'] * .75);
                }
            }

            /*** Calculate Run Block ***/
            $data['runBlock'] = null;
            if (array_key_exists('benchPress', $metrics) && !in_array($metrics['benchPress'], [null, "-", "", "null"])
                && !in_array($metrics['broadJump'], [null, "-", "", "null"]) ) {
                $data['runBlock'] = ($percentiles['bully'] * .20) + ($percentiles['power'] * .80);
            }

            if (array_key_exists('benchPress', $metrics) && in_array($metrics['benchPress'], [null, "-", "", "null"])
                && !in_array($metrics['broadJump'], [null, "-", "", "null"]) ) {
                $data['runBlock'] = $percentiles['power'];
            }

            if (array_key_exists('benchPress', $metrics) && !in_array($metrics['benchPress'], [null, "-", "", "null"])
                && in_array($metrics['broadJump'], [null, "-", "", "null"]) ) {
                $data['runBlock'] = $percentiles['benchPress'];
            }

            /*** Calculate Pass Block ***/
            if (array_key_exists('shuttle', $metrics) && !in_array($metrics['shuttle'], [null, "-", "", "null"])
                && !in_array($metrics['benchPress'], [null, "-", "", "null"]) ) {
                $data['passBlock'] = ($percentiles['bully'] * .40) + ($percentiles['elusiveness'] * .60);
            }

            if (array_key_exists('shuttle', $metrics)
                && array_key_exists('benchPress', $metrics)
                && in_array($metrics['shuttle'], [null, "-", "", "null"])
                && !in_array($metrics['benchPress'], [null, "-", "", "null"]) ) {
                $data['passBlock'] = ($percentiles['bully'] * .40) + ($percentiles['speedScore'] * .60);
            }

            if ($metrics['elusiveness'] != null) {
                if ($metrics['power'] != null) {
                    $metrics['yac'] = round((($percentiles['elusiveness'] * .35) + ($percentiles['power'] * .5)) + ($percentiles['fortyTime'] * .15),2);
                } else {
                    $metrics['yac'] = round(($percentiles['elusiveness'] * .7),2);
                }
            } else {
                if ($metrics['power'] != null) {
                    $metrics['yac'] = round(($percentiles['power'] * .7),2);
                } else {
                    $metrics['yac'] = null;
                }
            }

            /*** Calculate InLine Score ***/
            if ($data['runBlock'] !== null && $metrics['yac']) {
                $data['inLine'] = ($data['runBlock'] * .75) + ($percentiles['bmi'] * .10) + ($percentiles['weight'] * .15);
            } else  {
                $data['inLine'] = ($percentiles['speedScore'] * .75) + ($percentiles['bmi'] * .10) + ($percentiles['weight'] * .15);
            }


            //Alpha -  Move+Line
            if ($data['move'] != null && $data['inLine'] != null) {
                $data['alpha'] = ($metrics['yac'] * .20) + ($data['move'] * .70) + ($data['inLine'] * .10);
            }

            $metrics['move'] = round($data['move'], 2);
            $metrics['inLine'] = round($data['inLine'], 2);
            $metrics['alpha'] = round($data['alpha'], 2);
            $metrics['runBlock'] = round($data['runBlock'], 2);
            $metrics['passBlock'] = round($data['passBlock'], 2);

            /*** Make College Score ***/
            if ($te->college_stats != null) {
                $college = $this->makeCollegeScore($te);
            } else {
                $college = false;
            }

            if ($college !== false) {
                $metrics['collegeScore'] = $college['collegeScore'];
                $metrics['bestSeason'] = $college['bestSeason'];
                $metrics['breakoutClass'] = $college['breakoutClass'];
                $metrics['breakoutSeasons'] = $college['breakoutSeasons'];
                $metrics['collegeSeasons'] = $college['collegeSeasons'];
                $metrics['bestDominator'] = $college['bestDominator'];
                $te->setCollegeStats($college['collegeStats']);

                $metrics['alpha'] = ($metrics['alpha'] * .8) + (($college['collegeScore']/20) * .2);
                $metrics['alpha'] = round($metrics['alpha'], 2);
            } else {
                $metrics['collegeScore'] = null;
                $metrics['bestSeason'] = null;
                $metrics['breakoutClass'] = null;
            }

            

            $te->setMetrics($metrics);

            $this->command->save($te);
            $pointer++;
            $progressBar->update($pointer);
        }
        $progressBar->finish();
    }

    public function makeCollegeScore($te)
    {
        $collegeStats = $te->college_stats;
        $i = 0;
        $breakout = false;
        $collegeScore = 0;
        $bestDominator = .01;
        $bestSeason = [];
        $lastYear = "";
        $breakoutClass = "None";
        $bestReturn = 0;
        $breakoutSeasons = 0;
        $lastBreakout = 0;
        $bonus = 0;
        $oncf = "";
        foreach ($collegeStats as $year => $stats) {
            if ($stats->year != "Career") {
                $i++;

                if (!array_key_exists('totals', $stats)) {
                    continue;
                }

                if ($stats['totals']['yds'] == 0 || !array_key_exists('totals', $stats)) {
                    //we don't have team totals so we can't do calculations
                    return [
                        'collegeScore' => null,
                        'bestSeason' => null,
                        'bestReturn' => null,
                        'breakoutClass' => null,
                        'breakoutSeasons' => null,
                        "collegeSeasons" => null,
                        "bestDominator" => null,
                        "collegeStats" => $collegeStats
                    ];
                }

                // determine dominators
                $dominator['td'] = round(($stats['recTds'] / $stats['totals']['tds'] ) * 100, 2);
                $dominator['yd'] = round(($stats['recYds'] / $stats['totals']['yds']) * 100, 2);
                $dominator['rec'] = round(($stats['recs'] / $stats['totals']['recs']) * 100, 2);

                if ($stats['games'] > 4 && $stats['games'] < 9 && $stats['year'] != '2020') {
                    $dominator['td'] = round(($dominator['td']/$stats['games']) * 12,2);
                    $dominator['yd'] = round(($dominator['yd']/$stats['games']) * 12,2);
                    $dominator['rec'] = round(($dominator['rec']/$stats['games']) * 12,2);
                }

                $collegeStats[$year]['dominator'] = round(($dominator['yd'] + $dominator['td'])/2, 2);
                $collegeStats[$year]['tdDominator'] = round($dominator['td'] * 100, 2);
                $collegeStats[$year]['recDominator'] = round($dominator['rec'] * 100, 2);
                $collegeStats[$year]['ydDominator'] = round($dominator['yd'] * 100, 2);
                $breakout = 0;

                if ($dominator['rec'] > 15 && (($dominator['yd'] + $dominator['td'])/2) > 15) {
                    $breakout = 3;
                } else {
                    // get breakout season score
                    foreach($dominator as $type => $score) {
                        if ($score !== 0) {
                            switch (true) {
                                case ($score > (15)):
                                    $breakout = $breakout + .9;
                                    break;
                                case ($score > (10)):
                                    $breakout = $breakout + .5;
                                    break;
                                case ($score > (5)):
                                    $breakout = $breakout + .25;
                                case $breakout;
                                default:
                            }
                        }
                    }
                }

                // add to breakout seasons
                switch ($breakout) {
                    case 3:
                        $breakoutSeasons = $breakoutSeasons + 1;
                        break;
                    case ($breakout >= 2):
                        $breakoutSeasons = $breakoutSeasons + .5;
                        break;
                    case ($breakout >= 1):
                        $breakoutSeasons = $breakoutSeasons + .25;
                        break;
                    default:
                }

                // determine breakout class
                if ($breakout == 3 && array_key_exists('class', $stats)) {
                    if ($breakoutClass == "None") {
                        if ($i == 1) {
                            if ($stats['class'] == "FR") {
                                $breakoutClass = "True Freshman";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 2) {
                            if ($stats['class'] == "FR") {
                                $breakoutClass = "Redshirt Freshman";
                            } elseif ($stats['class'] == "SO") {
                                $breakoutClass = "Sophomore";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 3) {
                            if ($stats['class'] == "SO") {
                                $breakoutClass = "Redshirt Sophomore";
                            } elseif ($stats['class'] == "JR") {
                                $breakoutClass = "Junior";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 4) {
                            if ($stats['class'] == "JR") {
                                $breakoutClass = "Redshirt Junior";
                            } elseif ($stats['class'] == "SR") {
                                $breakoutClass = "Senior";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 5) {
                            if ($stats['class'] == "SR") {
                                $breakoutClass = "Redshirt Senior";
                            } elseif ($stats['class'] == "SR") {
                                $breakoutClass = "SR";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } else {
                            $breakoutClass = "SR";
                        }
                    }
                }

                // determine best dominator
                $currentDominator = round((array_sum([$dominator['yd'], $dominator['td']])) / 2, 2);
                if ($currentDominator > $bestDominator) {
                    $bestDominator = $currentDominator;
                    $bestSeason = $stats;
                    $bestSeason['ydsDominator'] = $dominator['yd'];
                    $bestSeason['tdsDominator'] = $dominator['td'];
                }

                // Best breakout score
                if ($breakout == 3) {
                    switch ($currentDominator) {
                        case $currentDominator >= 40 && $stats['recYds'] > 1000:
                            $collegeScore = $collegeScore + 3;
                            break;
                        case $currentDominator >= 35 && $stats['recYds'] > 1000:
                            $collegeScore = $collegeScore + 2.75;
                            break;
                        case $currentDominator >= 30:
                            $collegeScore = $collegeScore + 2.50;
                            break;
                        case $currentDominator >= 27.51:
                            $collegeScore = $collegeScore + 2.25;
                            break;
                        case $currentDominator >= 25:
                            $collegeScore = $collegeScore + 2;
                            break;
                        case $currentDominator >= 23.51:
                            $collegeScore = $collegeScore + 1.75;
                            break;
                        case $currentDominator >= 20:
                            $collegeScore = $collegeScore + 1.50;
                            break;
                        case $currentDominator >= 15:
                            $collegeScore = $collegeScore + 1.25;
                            break;
                        default:
                    }
                }

                if ($stats['recYds'] > 1000) {
                    $bonus = $bonus + 1;
                }

                if (array_key_exists('rushYds', $stats)) {
                    if ($stats['rushYds'] > 50) {
                        $bonus = $bonus + .5;
                    }

                    if ($stats['rushYds'] > 100) {
                        $bonus = $bonus + .5;
                    }

                    if ($stats['rushYds'] > 150) {
                        $bonus = $bonus + 1;
                    }
                }

                $lastBreakout = $breakout;
                $collegeScore = $collegeScore + $breakout;

                if (array_key_exists('conference', $stats)) {
                    $conf = $stats['conference'];
                    if ($stats['college'] == "Notre Dame") {
                        $conf = "ACC";
                    }
                } else {
                    $conf = "";
                }

                if (array_key_exists('class', $stats)) {
                    $lastYear = $stats['class'];
                } else {
                    $lastYear = "";
                }

            }
        }
        //$collegeScore = round(($breakoutSeasons/$i) * 10, 2);
        // Coming out as a junior, add last breakout to simulate senior season
        if (($lastYear == "JR" || $lastYear == "SO") && $i == 3) {
            $collegeScore = $collegeScore + $lastBreakout + 2;
        }
        /**** Bonuses ****/
        $collegeScore = $collegeScore + $bonus;

        // Breakout class
        if ($breakoutClass == "True Freshman") {
            $power5 = ["ACC", "Big Ten", "SEC", "Big 12", "Pac-12"];
            $minor5 = ["MWC", "American", "CUSA", "MAC", "Sun Belt"];
            if (in_array($conf, $power5) ) {
                $collegeScore = $collegeScore + 9;
            } else {
                $collegeScore = $collegeScore + 7;
            }
        } elseif (in_array($breakoutClass, ["Redshirt Freshman", "SO", "Sophomore"])) {
            $collegeScore = $collegeScore + 5;
        } elseif ($breakoutClass == "JR" || $breakoutClass == "Redshirt Sophomore" || $breakoutClass == "Junior") {
            $collegeScore = $collegeScore + 4;
        } else {
            $collegeScore = $collegeScore + 3;
        }

        //Conference bonus/penalty for not Division 1
        if (array_key_exists('conference', $stats)) {
            $power5 = ["ACC", "Big Ten", "SEC", "Big 12", "Pac-12"];
            $minor5 = ["MWC", "American", "CUSA", "MAC", "Sun Belt"];
            if (in_array($conf, $power5)) {
                $collegeScore = $collegeScore + 4;
            } elseif (in_array($conf, $minor5)) {
                $collegeScore = $collegeScore + 0;
            } else {
                if ($collegeScore > 15) {
                    $collegeScore = $collegeScore - 4;
                }
            }
        }

//        // Best breakout score
//        switch ($bestDominator) {
//            case $bestDominator >= 35:
//                $collegeScore = $collegeScore + 2;
//                break;
//            case $bestDominator >= 30:
//                $collegeScore = $collegeScore + 1.5;
//                break;
//            case $bestDominator >= 25:
//                $collegeScore = $collegeScore + 1;
//                break;
//            default:
//        }

//        if ($bestReturn != 0) {
//            switch ($bestReturn) {
//                case $bestReturn > 1000:
//                    $collegeScore = $collegeScore + 4;
//                    break;
//                case $bestReturn > 750:
//                    $collegeScore = $collegeScore + 3;
//                    break;
//                case $bestReturn > 500:
//                    $collegeScore = $collegeScore + 2;
//                    break;
//                case $bestReturn > 250:
//                    $collegeScore = $collegeScore + 1;
//                    break;
//                default:
//            }
//        }

        if ($breakoutClass == "JR") {
            $breakoutClass = "Junior";
        }

        if ($breakoutClass == "SR") {
            $breakoutClass = "Senior";
        }

        return [
            'collegeScore' => $collegeScore,
            'bestSeason' => $bestSeason,
            'bestReturn' => $bestReturn,
            'breakoutClass' => $breakoutClass,
            'breakoutSeasons' => $breakoutSeasons,
            "collegeSeasons" => $i,
            "bestDominator" => $bestDominator,
            "collegeStats" => $collegeStats
        ];

    }

    public function scrapCollegeJob()
    {
        $tes = $this->repository->findAllPlayers("TE");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, $tes->count());
        $pointer = 0;
        $collegePlayers = $this->sisApi->getCollegePlayers('2021');
        $collect = collect($collegePlayers);

        foreach ($tes as $te) {
            $te->decodeJson();
            $metrics = $te->getMetrics();
            if ($te->getTeam() == "Rookie") {
                $te->decodeJson();
                $apiInfo = $te->getApiInfo();
                $playerInfo = $te->getPlayerInfo();
                $firstName = $te->getFirstName();
                $lastName = $te->getLastName();
                $result = $collect->firstWhere('fullName', $firstName." ".$lastName);
                if (empty($result)) {
                    $result = [];
                } else {
                    $playerInfo['birth_date'] = $result['birthdate'];
                    $playerInfo['heightInches'] = $result['height'];
                    $playerInfo['draft_year'] = $result['season'] + 1;
                    $playerInfo['redShirt'] = $result['redShirt'];
                    $apiInfo['cfb_id'] = $result['playerId'];
                    $te->setApiInfo($apiInfo);
                    $te->setPlayerInfo($playerInfo);
                }
                $result = $this->scrapCollegeStats($te);
                if ($result == false) {
                    continue;
                }
                $pointer++;
                $progressBar->update($pointer);
            }
        }
        $progressBar->finish();
    }

    public function scrapCollegeStats($te)
    {
        $request = new Request();
        $apiInfo = $te->getApiInfo();
        if (!array_key_exists('cfb-alias', $apiInfo) || $apiInfo['cfb-alias'] == null) {
            $firstName = strtolower($te->getFirstName());
            $lastName = strtolower($te->getLastName());
            $cfb = "{$firstName}-{$lastName}-1";
        } else {
            $cfb = $apiInfo['cfb-alias'];
        }
        $request->setUri("https://www.sports-reference.com/cfb/players/{$cfb}.html");

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $dom = new Query($html);
        $results = $dom->execute('#receiving tr');

        $count = count($results);
        if ($count == 0) {
            return false;
        }
        $collegeStats = [];
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(1)->nodeValue;

            if (!empty($firstItem) && $firstItem != 'Year') {
//                if ($rowChildren->item(1)->nodeValue != $wr['college']) {
//                    return false;
//                }
                $year = $rowChildren->item(0)->nodeValue;
                if ($year == "Career") {
                    continue;
                }
                $year = str_replace("*", "", $year);
                if (! $rowChildren->item(1)->firstChild instanceof \DOMElement) {
                    return false;
                }
                $collegeHref = $rowChildren->item(1)->firstChild->getAttribute("href");
                $totals = $this->getCollegeTotals($collegeHref);
                $collegeStats[$year]['totals'] = $totals;
                $collegeStats[$year]['year'] = $year;
                $collegeStats[$year]['college'] = $rowChildren->item(1)->nodeValue;
                $collegeStats[$year]['class'] = $rowChildren->item(3)->nodeValue;
                $collegeStats[$year]['conference'] = $rowChildren->item(4)->nodeValue;
                $collegeStats[$year]['games'] = $rowChildren->item(5)->nodeValue;
                $collegeStats[$year]['recs'] = $rowChildren->item(6)->nodeValue;
                $collegeStats[$year]['recYds'] = $rowChildren->item(7)->nodeValue;
                $collegeStats[$year]['recAvg'] = $rowChildren->item(8)->nodeValue;
                $collegeStats[$year]['recTds'] = $rowChildren->item(9)->nodeValue;
            }
            // $result is a DOMElement
        }

        $collegeStats = $this->getSisMissingCollegeStats($te, $collegeStats);
        $te->setCollegeStats($collegeStats);
        $this->command->save($te);
        return true;
    }

    public function getCollegeTotals($href)
    {
        $request = new Request();
        $uri = "https://www.sports-reference.com{$href}";
        $request->setUri($uri);

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $weird = strpos($html, '<div class="overthrow table_container" id="div_rushing_and_receiving">');
        //$pos = ‌‌strpos($html, '<div class="overthrow table_container" id="div_rushing_and_receiving">');
        $newhtml =  substr($html, $weird);

        $dom = new Query($newhtml);
        $results = $dom->execute('#rushing_and_receiving tr');
        $count = count($results);
        $total['recs'] = 0;
        $total['yds'] = 0;
        $total['tds'] = 0;
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(0)->nodeValue;
            if ($firstItem > 0.5) {
                $recs = $rowChildren->item(6)->nodeValue;
                $total['recs'] = $recs + $total['recs'];
                $yds = $rowChildren->item(7)->nodeValue;
                $total['yds'] = $yds + $total['yds'];
                $tds = $rowChildren->item(9)->nodeValue;
                $total['tds'] = $tds + $total['tds'];
            }
        }

        return $total;
    }

    public function getSisMissingCollegeStats($te, $collegeStats)
    {
        $apiInfo = $te->getApiInfo();
        if (array_key_exists('cfb_id', $apiInfo) && $apiInfo['cfb_id'] != null) {
            $recSeasons = $this->sisApi->getCollegeStats($apiInfo['cfb_id'], "receiving");
            foreach ($recSeasons as $recSeason) {
                if ($recSeason['teamId'] != null) {
                    $recTotals = $this->sisApi->getCollegeTeamStats($recSeason['season'], $recSeason['teamId'], "receiving");
                    $team = collect($recTotals);
                    $totals['targets'] = $team->sum('targets');
                    $totals['recs'] = $team->sum('recs');
                    $totals['yds'] = $team->sum('yards');
                    $totals['tds'] = $team->sum('td');
                } else {
                    $totals['targets'] = 0;
                    $totals['recs'] = 0;
                    $totals['yds'] = 0;
                    $totals['tds'] = 0;
                }
                $year = $recSeason['season'];
                $collegeStats[$year]['totals'] = $totals;
                $collegeStats[$year]['year'] = $year;
                $collegeStats[$year]['team'] = $recSeason['team'];
                $collegeStats[$year]['games'] = $recSeason['g'];
                $collegeStats[$year]['targets'] = $recSeason['targets'];
                $collegeStats[$year]['recs'] = $recSeason['recs'];
                $collegeStats[$year]['recYds'] = $recSeason['yards'];
                $collegeStats[$year]['recAvg'] = $recSeason['yardsPerRec'];
                $collegeStats[$year]['recTds'] = $recSeason['td'];
            }

            if (array_key_exists('Career', $collegeStats)) {
                unset($collegeStats['Career']);
            }
        }

        return $collegeStats;
    }

    public function findCfbId($year){
        $wrs = $this->repository->findAllPlayers("TE");
        $collegePlayers = $this->sisApi->getCollegePlayers('2021');
        $collect = collect($collegePlayers);
        $progressBar = new ProgressBar($this->consoleAdapter, 0, $wrs->count());
        $pointer = 0;
        foreach ($wrs as $wr) {
            $apiInfo = $wr->getApiInfo();
            if (!array_key_exists('cfb_id', $apiInfo) && $wr->getTeam() == 'Rookie') {
                $playerInfo = $wr->getPlayerInfo();
                $firstName = $wr->getFirstName();
                $lastName = $wr->getLastName();
                $result = $collect->firstWhere('fullName', $firstName." ".$lastName);
                if (empty($result)) {
                    continue;
                } else {
                    $playerInfo['birth_date'] = $result['birthdate'];
                    $playerInfo['heightInches'] = $result['height'];
                    $playerInfo['redShirt'] = $result['redShirt'];
                    $apiInfo['cfb_id'] = $result['playerId'];
                    $wr->setApiInfo($apiInfo);
                    $wr->setPlayerInfo($playerInfo);
                    $this->command->save($wr);
                }
            }
            $pointer++;
            $progressBar->update($pointer);
        }
        $progressBar->finish();
        //**** phase 2 use passing info *****//
        $wrs = $this->repository->findAllPlayers("TE");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, $wrs->count());
        $pointer = 0;
        $collegeYear = $year - 1;
        $players = $this->sisApi->getCollegePassing($collegeYear, "receiving", [
            'ReceivingFilters.MinAirYards' => -20,
            'ReceivingFilters.MaxAirYards' => 100,
            'ReceivingFilters.TargetPos' => 5
        ]);
        $collect = collect($players);
        $broken = [];
        foreach ($wrs as $wr) {
            $wr->decodeJson();
            $apiInfo = $wr->getApiInfo();
            $info = $wr->getPlayerInfo();
            if (!array_key_exists('cfb_id', $apiInfo ) && $wr->getTeam() == 'Rookie') {
                $playerInfo = $wr->getPlayerInfo();
                $firstName = $wr->getFirstName();
                $lastName = $wr->getLastName();
                $result = $collect->firstWhere('player', $firstName . " " . $lastName);
                if (empty($result)) {
                    $broken[] ="{$firstName } {$lastName}";
                } else {
                    $apiInfo['cfb_id'] = $result['playerId'];
                    $wr->setApiInfo($apiInfo);
                    $this->command->save($wr);
                }
            }
            $pointer++;
            $progressBar->update($pointer);
        }
        $progressBar->finish();
        print_r($broken);
    }

    public function makeCollegeBreakdown(){
        $wrs = $this->repository->findAllPlayers("TE");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, $wrs->count());
        $pointer = 0;
        $missing = [];
        foreach ($wrs as $wr) {
            if (1) {
                $wr->decodeJson();
                $metrics = $wr->getMetrics();
                $apiInfo = $wr->getApiInfo();
                $info = $wr->getPlayerInfo();
                if (array_key_exists('cfb_id', $apiInfo)
                    && !array_key_exists('collegeRecBreakdown', $metrics)
                    && $wr->getTeam() != 'FA'
                ) {
                    $collegeStats = $wr->getCollegeStats();
                    if (array_key_exists('cfb_id', $apiInfo) && $apiInfo['cfb_id'] != null) {
                        $recSeasons = $this->sisApi->getCollegeStats($apiInfo['cfb_id'], "receiving");
                        if (empty($recSeasons)) {
                            $missing[$apiInfo['cfb_id']] = $wr->getFirstName()." ".$wr->getLastName();
                            continue;
                        }
                        $bestSeason = 0;
                        $mostYards = 0;
                        foreach ($recSeasons as $recSeason) {
                            if ($recSeason['teamId'] != null) {
                                $areas = [
                                    [
                                        "area" => "underneath",
                                        "low" => -10,
                                        "high" => 0,
                                    ],
                                    [
                                        "area" => "short",
                                        "low" => 1,
                                        "high" => 9,
                                    ],
                                    [
                                        "area" => "intermediate",
                                        "low" => 10,
                                        "high" => 20,
                                    ],
                                    [
                                        "area" => "deep",
                                        "low" => 21,
                                        "high" => 100,
                                    ],
                                ];
                                $recBreakdown = [];
                                foreach ($areas as $area) {
                                    //set default values
                                    $recBreakdown[$area['area']] = [
                                        'playerId' => 0,
                                        'player' => 0,
                                        'yards' => 0,
                                        'tDs' => 0,
                                        'receptions' => 0,
                                        'ybContact' => 0,
                                        'yaContact' => 0,
                                        'aDoT' => 0,
                                        'airYards' => 0,
                                        'tds' => 0,
                                        'yac' => 0,
                                    ];
                                    $stats = $this->sisApi->getCollegePassing($recSeason['season'], "receiving", [
                                        'ReceivingFilters.MinAirYards' => $area['low'],
                                        'ReceivingFilters.MaxAirYards' => $area['high'],
                                        "GameFilters.Team" => $recSeason['teamId']
                                    ]);
                                    //loop through team results for area
                                    foreach ($stats as $stat) {
                                        if ($stat['playerId'] == $apiInfo['cfb_id']) {
                                            $recBreakdown[$area['area']] = [
                                                'playerId' => $stat['playerId'],
                                                'player' => $stat['player'],
                                                'yards' => $stat['yards'],
                                                'tDs' => $stat['tDs'],
                                                'receptions' => $stat['receptions'],
                                                'ybContact' => $stat['ybContact'],
                                                'yaContact' => $stat['yaContact'],
                                                'aDoT' => $stat['aDoT'],
                                                'airYards' => $stat['airYards'],
                                                'tds' => $stat['tDs'],
                                                'yac' => $stat['yac'],
                                            ];
                                            break;
                                        }
                                    }
                                }
                                if ($recSeason['recs'] > 0 && $recSeason['yards'] > 0) {
                                    $recPercents = [];
                                    if (array_key_exists('deep', $recBreakdown)) {
                                        $recPercents['yards']['separation']['deepSeparation'] = round(($recBreakdown['deep']['airYards'] / $recSeason['yards']) * 100, 2);
                                        $recPercents['yards']['ybc']['deepYBC'] = round(($recBreakdown['deep']['ybContact'] / $recSeason['yards']) * 100, 2);
                                        $recPercents['yards']['yac']['deepYAC'] = round(($recBreakdown['deep']['yaContact'] / $recSeason['yards']) * 100, 2);
                                        $recPercents['recs']['deepRecs'] = round(($recBreakdown['deep']['receptions'] / $recSeason['recs']) * 100, 2);
                                    }

                                    if (array_key_exists('intermediate', $recBreakdown)) {
                                        $recPercents['yards']['separation']['midSeparation'] = round(($recBreakdown['intermediate']['airYards'] / $recSeason['yards']) * 100, 2);
                                        $recPercents['yards']['ybc']['midYBC'] = round(($recBreakdown['intermediate']['ybContact'] / $recSeason['yards']) * 100, 2);
                                        $recPercents['yards']['yac']['midYAC'] = round(($recBreakdown['intermediate']['yaContact'] / $recSeason['yards']) * 100, 2);
                                        $recPercents['recs']['midRecs'] = round(($recBreakdown['intermediate']['receptions'] / $recSeason['recs']) * 100, 2);
                                    }

                                    if (array_key_exists('short', $recBreakdown)) {
                                        $recPercents['yards']['separation']['shortSeparation'] = round(($recBreakdown['short']['airYards'] / $recSeason['yards']) * 100, 2);
                                        $recPercents['yards']['yac']['shortYAC'] = round(($recBreakdown['short']['yaContact'] / $recSeason['yards']) * 100, 2);
                                        $recPercents['yards']['ybc']['shortYBC'] = round(($recBreakdown['short']['ybContact'] / $recSeason['yards']) * 100, 2);
                                        $recPercents['recs']['shortRecs'] = round(($recBreakdown['short']['receptions'] / $recSeason['recs']) * 100, 2);
                                    }

                                    if (array_key_exists('underneath', $recBreakdown)) {
                                        $recPercents['yards']['ybc']['underYBC'] = round(($recBreakdown['underneath']['ybContact'] / $recSeason['yards']) * 100, 2);
                                        $recPercents['yards']['yac']['underYAC'] = round(($recBreakdown['underneath']['yaContact'] / $recSeason['yards']) * 100, 2);
                                        $recPercents['recs']['underRecs'] = round(($recBreakdown['underneath']['receptions'] / $recSeason['recs']) * 100, 2);
                                    }
                                    $year = $recSeason['season'];
//                                $collegeStats[$year]['yac'] = $recSeason['yac'];//
                                    $collegeStats[$year]['recBreakdown'] = $recBreakdown;
                                    $collegeStats[$year]['recPercents'] = $recPercents;

                                    if ($recSeason['yards'] > $mostYards) {
                                        $mostYards = $recSeason['yards'];
                                        $bestSeason = $recSeason['season'];
                                    }
                                }
                            }
                        }
                        if ($mostYards > 0 && $bestSeason > 0) {
                            $metrics['collegeRecBreakdown'] = $collegeStats[$bestSeason]['recBreakdown'];
                            $metrics['collegeRecPercents'] = $collegeStats[$bestSeason]['recPercents'];
                            $wr->setMetrics($metrics);
                        }

                        $wr->setCollegeStats($collegeStats);
                        $this->command->save($wr);

                        $pointer++;
                        $progressBar->update($pointer);
                    }
                }
            }
        }
        $progressBar->finish();
        print_r($missing);
    }
}