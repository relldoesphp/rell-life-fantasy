<?php
/**
 * Created by IntelliJ IDEA.
 * User: tcook
 * Date: 8/7/19
 * Time: 4:38 PM
 */

namespace Player\Service\Position;


use Player\Model\Player\PlayerCommandInterface;
use Player\Model\Player\PlayerRepositoryInterface;
use Zend\Db\Adapter\AdapterInterface;
use Zend\ProgressBar\Adapter\Console;
use Zend\ProgressBar\ProgressBar;
use Zend\Db\Sql\Select;
use Zend\Http\Request;
use Zend\Http\Client;
use Zend\Dom\Query;
class TeService extends ServiceAbstract
{
    private $consoleAdapter;
    private $repository;
    private $command;
    private $db;

    public $specialMetrics = [
        'move' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'inLine' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'alpha' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'collegeScore' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ]
    ];

    public function __construct(AdapterInterface $db, Console $consoleAdapter, PlayerCommandInterface $command, PlayerRepositoryInterface $repository)
    {
        parent::__construct($db, $consoleAdapter, $command, $repository);
        $this->repository = $repository;
        $this->command = $command;
        $this->consoleAdapter = $consoleAdapter;
    }

    public function calculateMetrics($type)
    {
        parent::calculateMetrics("TE"); // TODO: Change the autogenerated stub
    }

    public function calculatePercentiles($type = "", $array = [])
    {
        parent::calculatePercentiles("TE", $this->percentileMetrics); // TODO: Change the autogenerated stub
    }

    public function calculateSpecialPercentiles()
    {
        parent::calculatePercentiles("TE", $this->specialMetrics);
    }

    public function calculateSpecialScores()
    {
        $tes = $this->repository->findAllPlayers("TE");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, count($tes));
        $pointer = 0;
        foreach ($tes as $te) {
            if ($te->getId() == 113) {
                $gothim = true;
            }

            $te->decodeJson();
            if (empty($te->getMetrics())) {
                continue;
            }

            $info = $te->getPlayerInfo();
            $metrics = $te->getMetrics();
            $percentiles = $te->getPercentiles();

            /*** Calculate Run Block ***/
            $data['runBlock'] = null;
            if (!in_array($metrics['benchPress'], [null, "-", "", "null"])
                && !in_array($metrics['broadJump'], [null, "-", "", "null"]) ) {
                $data['runBlock'] = ($percentiles['bully'] * .30) + ($percentiles['power'] * .70);
            }

            if (in_array($metrics['benchPress'], [null, "-", "", "null"])
                && !in_array($metrics['broadJump'], [null, "-", "", "null"]) ) {
                $data['runBlock'] = $percentiles['power'];
            }

            if (!in_array($metrics['benchPress'], [null, "-", "", "null"])
                && in_array($metrics['broadJump'], [null, "-", "", "null"]) ) {
                $data['runBlock'] = $percentiles['benchPress'];
            }

            /*** Calculate Pass Block ***/
            if (!in_array($metrics['shuttle'], [null, "-", "", "null"])
                && !in_array($metrics['benchPress'], [null, "-", "", "null"]) ) {
                $data['passBlock'] = ($percentiles->bully * .40) + ($percentiles->elusiveness * .60);
            }

            if (in_array($metrics['shuttle'], [null, "-", "", "null"])
                && !in_array($metrics['benchPress'], [null, "-", "", "null"]) ) {
                $data['passBlock'] = ($percentiles->bully * .40) + ($percentiles->speedScore * .60);
            }

            /*** Calculate Move Score ***/
            //Move - TE Speed + Jumpball + Route Agility
            $data['move'] = 0;

            if (!in_array($metrics['routeAgility'], [null, "-", "", "null"])
                && !in_array($metrics['fortyTime'], [null, "-", "", "null"]) ) {
                $data['move'] = ($percentiles['routeAgility'] * .70) + ($percentiles['fortyTime'] * .30);
            }

            if (!in_array($metrics['routeAgility'], [null, "-", "", "null"])
                && in_array($metrics['fortyTime'], [null, "-", "", "null"]) ) {
                $data['move'] = $percentiles['routeAgility'];
            }

            if (in_array($metrics['routeAgility'], [null, "-", "", "null"])
                && !in_array($metrics['fortyTime'], [null, "-", "", "null"]) ) {
                $data['move'] = $percentiles['fortyTime'];
            }

            if (!in_array($metrics['verticalJump'], [null, "-", "", "null"])) {
                $data['move'] = ($percentiles['verticalJump'] * .25) + ($data['move'] * .75);
            }

            /*** Calculate InLine Score ***/
            if (!in_array($data['runBlock'], [null, "-", "", "null"])
                && !in_array($percentiles['bmi'], [null, "-", "", "null"]) ) {
                $data['inLine'] = ($percentiles['runBlock'] * .60) + ($percentiles['bmi'] * .20) + ($percentiles['weight'] * .20);
            }

            if (in_array($data['runBlock'], [null, "-", "", "null"])
                && !in_array($percentiles['weight'], [null, "-", "", "null"]) ) {
                $data['inLine'] = ($percentiles['speedScore'] * .60) + ($percentiles['bmi'] * .20) + ($percentiles['weight'] * .20);
            }

            //Alpha -  Move+Line
            $data['alpha'] = ($data['inLine'] + $data['move'])/2;

            $metrics['move'] = round($data['move'], 2);
            $metrics['inLine'] = round($data['inLine'], 2);
            $metrics['alpha'] = round($data['alpha'], 2);

            /*** Make College Score ***/
            if ($te->college_stats != null) {
                $college = $this->makeCollegeScore($te);
            } else {
                $college = false;
            }

            if ($college !== false) {
                $metrics['collegeScore'] = $college['collegeScore'];
                $metrics['bestSeason'] = $college['bestSeason'];
                $metrics['breakoutClass'] = $college['breakoutClass'];
                $metrics['breakoutSeasons'] = $college['breakoutSeasons'];
                $metrics['collegeSeasons'] = $college['collegeSeasons'];
                $metrics['bestDominator'] = $college['bestDominator'];
            } else {
                $metrics['collegeScore'] = null;
                $metrics['bestSeason'] = null;
                $metrics['breakoutClass'] = null;
            }

            $te->setMetrics($metrics);

            $this->command->save($te);
            $pointer++;
            $progressBar->update($pointer);
        }
        $progressBar->finish();
    }

    public function makeCollegeScore($te)
    {
        $collegeStats = $te->college_stats;
        $i = 0;
        $breakout = false;
        $collegeScore = 0;
        $bestDominator = .01;
        $bestSeason = [];
        $lastYear = "";
        $breakoutClass = "None";
        $bestReturn = 0;
        $breakoutSeasons = 0;
        $lastBreakout = 0;
        $i = 0;
        foreach ($collegeStats as $stats) {
            if ($stats->year != "Career") {
                if ($stats['totals']['tds'] == 0) {
                    return false;
                }
                // determine dominators
                $dominator['td'] = round(($stats['recTds'] / $stats['totals']['tds'] ) * 100, 2);
                $dominator['yd'] = round(($stats['recYds'] / $stats['totals']['yds']) * 100, 2);
                $dominator['rec'] = round(($stats['receptions'] / $stats['totals']['recs']) * 100, 2);
                $breakout = 0;

                if ($dominator['rec'] > 15 && (($dominator['yd'] + $dominator['td'])/2) > 15) {
                    $breakout = 3;
                } else {
                    // get breakout season score
                    foreach($dominator as $type => $score) {
                        if ($score !== 0) {
                            switch (true) {
                                case ($score > (15)):
                                    $breakout = $breakout + 1;
                                    break;
                                case ($score > (10)):
                                    $breakout = $breakout + .5;
                                    break;
                                case ($score > (5)):
                                    $breakout = $breakout + .25;
                                case $breakout;
                                default:
                            }
                        }
                    }
                }

                // add to breakout seasons
                switch ($breakout) {
                    case 3:
                        $breakoutSeasons = $breakoutSeasons + 1;
                        break;
                    case ($breakout >= 2):
                        $breakoutSeasons = $breakoutSeasons + .5;
                        break;
                    case ($breakout >= 1):
                        $breakoutSeasons = $breakoutSeasons + .25;
                        break;
                    default:
                }

                // determine breakout class
                if ($breakout == 3 ) {
                    if ($breakoutClass == "None") {
                        if ($i == 0) {
                            if ($stats['class'] == "FR") {
                                $breakoutClass = "True Freshman";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 1 ) {
                            if ($stats['class'] == "FR") {
                                $breakoutClass = "Redshirt Freshman";
                            } elseif ($stats['class'] == "SO") {
                                $breakoutClass = "Sophomore";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 2) {
                            $breakoutClass = "JR";
                        } else {
                            $breakoutClass = "SR";
                        }
                    }
                }

                // determine best dominator
                $currentDominator = round((array_sum([$dominator['yd'], $dominator['td']])) / 2, 2);
                if ($currentDominator > $bestDominator) {
                    $bestDominator = $currentDominator;
                    $bestSeason = $stats;
                    $bestSeason['ydsDominator'] = $dominator['yd'];
                    $bestSeason['tdsDominator'] = $dominator['td'];
                }

                // determine return dominator
//                if ($stats['returnStats']['puntYds'] > 0) {
//                    $bestReturn = $stats['returnStats']['puntYds'] + $stats['returnStats']['kickYds'];
//                }

                // save last year
                $lastBreakout = $breakout;
//                $conf = $stats['conference'];
//                if ($stats['college'] == "Notre Dame") {
//                    $conf = "ACC";
//                }
                $lastYear = $stats['class'];
                $i++;
            }
        }
        $collegeScore = round(($breakoutSeasons/$i) * 10, 2);
        /**** Bonuses ****/
        // Coming out as a junior, add last breakout to simulate senior season
        if ($lastYear !== "SR" && $i < 3) {
            $collegeScore = $collegeScore + $lastBreakout + .5;
        }

        // Breakout class
        if ($breakoutClass == "FR") {
            $collegeScore = $collegeScore + 3;
        } elseif ($breakoutClass == "SO") {
            $collegeScore = $collegeScore + 2;
        } elseif ($breakoutClass == "JR") {
            $collegeScore = $collegeScore + 1;
        } else {
            $collegeScore = $collegeScore + 0;
        }

        //Conference bonus/penalty for not Division 1
//        $power5 = ["ACC", "Big Ten", "SEC", "Big 12", "Pac-12"];
//        $minor5 = ["MWC", "American", "CUSA", "MAC", "Sun Belt"];
//        if (in_array($conf, $power5) ) {
//            $collegeScore = $collegeScore + 1;
//        } elseif (in_array($conf, $minor5)) {
//            $collegeScore = $collegeScore + 0;
//        } else {
//            $collegeScore = $collegeScore - 2;
//        }

        // Best breakout score
        switch ($bestDominator) {
            case $bestDominator >= 35:
                $collegeScore = $collegeScore + 2;
                break;
            case $bestDominator >= 30:
                $collegeScore = $collegeScore + 1.5;
                break;
            case $bestDominator >= 25:
                $collegeScore = $collegeScore + 1;
                break;
            default:
        }

//        if ($bestReturn != 0) {
//            switch ($bestReturn) {
//                case $bestReturn > 1000:
//                    $collegeScore = $collegeScore + 4;
//                    break;
//                case $bestReturn > 750:
//                    $collegeScore = $collegeScore + 3;
//                    break;
//                case $bestReturn > 500:
//                    $collegeScore = $collegeScore + 2;
//                    break;
//                case $bestReturn > 250:
//                    $collegeScore = $collegeScore + 1;
//                    break;
//                default:
//            }
//        }

        if ($breakoutClass == "JR") {
            $breakoutClass = "Junior";
        }

        if ($breakoutClass == "SR") {
            $breakoutClass = "Senior";
        }

        return [
            'collegeScore' => $collegeScore,
            'bestSeason' => $bestSeason,
            'bestReturn' => $bestReturn,
            'breakoutClass' => $breakoutClass,
            'breakoutSeasons' => $breakoutSeasons,
            "collegeSeasons" => $i,
            "bestDominator" => $bestDominator
        ];

    }

    public function scrapCollegeJob()
    {
        $tes = $this->repository->findAllPlayers("TE");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, $tes->count());
        $pointer = 0;

        foreach ($tes as $te) {
            $te->decodeJson();
            $result = $this->scrapCollegeStats($te);
            if ($result == false) {
                continue;
            }
            $pointer++;
            $progressBar->update($pointer);
        }
        $progressBar->finish();
    }

    public function scrapCollegeStats($te)
    {
        $request = new Request();
        $apiInfo = $te->getApiInfo();
        if (!array_key_exists('cfb-alias', $apiInfo) || $apiInfo['cfb-alias'] == null) {
            $firstName = strtolower($te->getFirstName());
            $lastName = strtolower($te->getLastName());
            $cfb = "{$firstName}-{$lastName}-1";
        } else {
            $cfb = $apiInfo['cfb-alias'];
        }
        $request->setUri("https://www.sports-reference.com/cfb/players/{$cfb}.html");

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $dom = new Query($html);
        $results = $dom->execute('#receiving tr');

        $count = count($results);
        if ($count == 0) {
            return false;
        }
        $collegeStats = [];
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(1)->nodeValue;

            if (!empty($firstItem) && $firstItem != 'Year') {
//                if ($rowChildren->item(1)->nodeValue != $wr['college']) {
//                    return false;
//                }
                $year = $rowChildren->item(0)->nodeValue;
                if ($year == "Career") {
                    continue;
                }
                $year = str_replace("*", "", $year);
                if (! $rowChildren->item(1)->firstChild instanceof \DOMElement) {
                    return false;
                }
                $collegeHref = $rowChildren->item(1)->firstChild->getAttribute("href");
                $totals = $this->getCollegeTotals($collegeHref);
                $collegeStats[$year]['totals'] = $totals;
                $collegeStats[$year]['year'] = $year;
                $collegeStats[$year]['college'] = $rowChildren->item(1)->nodeValue;
                $collegeStats[$year]['class'] = $rowChildren->item(3)->nodeValue;
                $collegeStats[$year]['games'] = $rowChildren->item(4)->nodeValue;
                $collegeStats[$year]['games'] = $rowChildren->item(5)->nodeValue;
                $collegeStats[$year]['receptions'] = $rowChildren->item(6)->nodeValue;
                $collegeStats[$year]['recYds'] = $rowChildren->item(7)->nodeValue;
                $collegeStats[$year]['recAvg'] = $rowChildren->item(8)->nodeValue;
                $collegeStats[$year]['recTds'] = $rowChildren->item(9)->nodeValue;
            }
            // $result is a DOMElement
        }

        $te->setCollegeStats($collegeStats);
        $this->command->save($te);
        return true;
    }

    public function getCollegeTotals($href)
    {
        $request = new Request();
        $uri = "https://www.sports-reference.com{$href}";
        $request->setUri($uri);

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $weird = strpos($html, '<div class="overthrow table_container" id="div_rushing_and_receiving">');
        //$pos = ‌‌strpos($html, '<div class="overthrow table_container" id="div_rushing_and_receiving">');
        $newhtml =  substr($html, $weird);

        $dom = new Query($newhtml);
        $results = $dom->execute('#rushing_and_receiving tr');
        $count = count($results);
        $total['recs'] = 0;
        $total['yds'] = 0;
        $total['tds'] = 0;
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(0)->nodeValue;
            if ($firstItem > 0.5) {
                $recs = $rowChildren->item(6)->nodeValue;
                $total['recs'] = $recs + $total['recs'];
                $yds = $rowChildren->item(7)->nodeValue;
                $total['yds'] = $yds + $total['yds'];
                $tds = $rowChildren->item(9)->nodeValue;
                $total['tds'] = $tds + $total['tds'];
            }
        }

        return $total;
    }
}