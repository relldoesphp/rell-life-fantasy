<?php
/**
 * Created by IntelliJ IDEA.
 * User: tcook
 * Date: 8/5/19
 * Time: 1:00 PM
 */

namespace Player\Service\Position;


use Player\Model\Player\PlayerCommandInterface;
use Player\Model\Player\PlayerRepositoryInterface;
use Laminas\Db\Adapter\AdapterInterface;
use Laminas\ProgressBar\Adapter\Console;
use Laminas\ProgressBar\ProgressBar;
use Laminas\Db\Sql\Select;
use Laminas\Http\Request;
use Laminas\Http\Client;
use Laminas\Dom\Query;
USE Player\Service\SportsInfoApi;
use Tightenco\Collect\Support\Collection;

class WrService extends ServiceAbstract
{

    private $consoleAdapter;
    private $repository;
    private $command;
    private $db;
    private $sisApi;

    public $specialMetrics = [
        'slot' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'deep' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'alpha' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'collegeScore' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'beatPress' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'separation' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'contested' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'yac' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'outsideX' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
    ];

    public function __construct(
        AdapterInterface $db,
        Console $consoleAdapter,
        PlayerCommandInterface $command,
        PlayerRepositoryInterface $repository,
        SportsInfoApi $sisApi
    )
    {
        parent::__construct($db, $consoleAdapter, $command, $repository, $sisApi);
        $this->repository = $repository;
        $this->command = $command;
        $this->consoleAdapter = $consoleAdapter;
        $this->sisApi = $sisApi;
    }

    public function calculateMetrics($type = "WR")
    {
        parent::calculateMetrics("WR"); // TODO: Change the autogenerated stub
    }

    public function calculatePercentiles($type = "WR", $array = [])
    {
        parent::calculatePercentiles("WR", $this->percentileMetrics); // TODO: Change the autogenerated stub
    }

    public function calculateSpecialPercentiles()
    {
        parent::calculatePercentiles("WR", $this->specialMetrics);
    }

    public function calculateSpecialScores()
    {
        $wrs = $this->repository->findAllPlayers("WR");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, $wrs->count());
        $pointer = 0;
        foreach ($wrs as $wr) {
            $wr->decodeJson();
            $info = $wr->getPlayerInfo();
            $metrics = $wr->getMetrics();
            $percentiles = $wr->getPercentiles();

            if ($wr->getId() == "102") {
                $gotem = true;
            }


//            if ($wr->getTeam() == "Rookie" || $wr->getId() == 2868) {
//                if ($wr->college_stats != null) {
//                    $college = $this->makeCollegeScore($wr);
//                    $metrics['collegeScore'] = $college['collegeScore'];
//                    $metrics['bestSeason'] = $college['bestSeason'];
//                    $metrics['breakoutClass'] = $college['breakoutClass'];
//                    $metrics['breakoutSeasons'] = $college['breakoutSeasons'];
//                    $metrics['collegeSeasons'] = $college['collegeSeasons'];
//                    $metrics['bestDominator'] = $college['bestDominator'];
//                    $wr->college_stats = $college['updateCollegeStats'];
//                } else {
//                    $metrics['collegeScore'] = null;
//                    $metrics['bestSeason'] = null;
//                    $metrics['breakoutClass'] = null;
//                }
//
//                $metrics['beatPress'] = null;
//                $metrics['contested'] = null;
//                $metrics['separation'] = null;
//                $metrics['yac'] = null;
//                $metrics["deep"] = null;
//                $metrics["slot"] = null;
//                $metrics["alpha"] = null;
//
//                $wr->setMetrics($metrics);
//
//                $this->command->save($wr);
//
//                $pointer++;
//                $progressBar->update($pointer);
//
//                continue;
//            }

            if (empty($metrics) || !array_key_exists('bully', $metrics)) {
                continue;
            }

            if (!array_key_exists('benchPress', $metrics)) {
                continue;
            }

            if (in_array($metrics['shuttle'], ["-", "", null])
                && in_array($metrics['cone'], ["-", "", null])) {
                $noAgility = true;
            } else{
                $noAgility = false;
            }

            if (in_array($metrics['verticalJump'], ["-", "", null])
                && in_array($metrics['broadJump'], ["-", "", null])) {
                $noJump = true;
            } else{
                $noJump = false;
            }

            if (in_array($metrics['fortyTime'], ["-", "", null])) {
                $noForty = true;
            } else{
                $noForty = false;
            }

            if (in_array($metrics['benchPress'], ["-", "", null])) {
                $noBench = true;
            } else{
                $noBench = false;
            }

            if (in_array($metrics['verticalJump'], ["-", "", null])) {
                $noVert = true;
            } else {
                $noVert = false;
            }

            if (in_array($metrics['cone'], ["-", "", null])) {
                $noCone = true;
            } else {
                $noCone = false;
            }


            //slot score
            $info = $wr->getPlayerInfo();
            if ($noAgility == false) {
                if ($percentiles['shuttle'] > 69 && $percentiles['cone'] < 41 && $info['heightInches'] < 73) {
                    $percentiles['routeAgility'] = ($percentiles['jukeAgility'] * .6) + ($percentiles['routeAgility'] * .4);
                }
            }
            $slot = null;
            if ($noCone) {
                $slot = null;
            } else {
                $slot = round(($percentiles['routeAgility'] * .65) + ($percentiles['elusiveness'] * .35),2);
            }

            $metrics['slot'] = $slot;


            //deep score
            if ($noForty)  {
                $deep = null;
            } else {
                $deep = round(($percentiles['fortyTime'] * .7) + ($percentiles['jumpball'] * .3), 2);
            }
            $metrics["deep"] = round($deep,2);


            if ($wr->college_stats != null) {
                $college = $this->makeCollegeScore($wr);
                $metrics['collegeScore'] = $college['collegeScore'];
                $metrics['bestSeason'] = $college['bestSeason'];
                $metrics['breakoutClass'] = $college['breakoutClass'];
                $metrics['breakoutSeasons'] = $college['breakoutSeasons'];
                $metrics['collegeSeasons'] = $college['collegeSeasons'];
                $metrics['bestDominator'] = $college['bestDominator'];
                $wr->college_stats = $college['updateCollegeStats'];
            } else {
                $metrics['collegeScore'] = null;
                $metrics['bestSeason'] = null;
                $metrics['breakoutClass'] = null;
            }

            if ($noBench == false) {
                if ($metrics['elusiveness'] != null) {
                    $metrics['beatPress'] = round((($percentiles['bully'] * .75) + ($percentiles['elusiveness'] * .25)),2);
                } else {
                    $metrics['beatPress'] = round($percentiles['bully'], 2);
                }
            } else {
                if ($metrics['elusiveness'] != null) {
                    $metrics['beatPress'] = round(($percentiles['elusiveness'] * .75), 2);
                } else {
                    $metrics['beatPress'] = null;
                }
            }

            if ($noCone == false) {
                if ($noForty == false) {
                    $metrics['separation'] = round((($percentiles['routeAgility'] * .65) + ($percentiles['fortyTime'] * .35)),2);
                } else {
                    $metrics['separation'] = round((($percentiles['routeAgility'] * .75)),2);
                }
            } else {
                $metrics['separation'] = null;
            }

            if ($metrics['elusiveness'] != null) {
                if ($metrics['power'] != null) {
                    $metrics['yac'] = round((($percentiles['elusiveness'] * .6) + ($percentiles['power'] * .25)) + ($percentiles['fortyTime'] * .15),2);
                } else {
                    $metrics['yac'] = round(($percentiles['elusiveness'] * .7),2);
                }
            } else {
                if ($metrics['power'] != null) {
                    $metrics['yac'] = round(($percentiles['power'] * .7),2);
                } else {
                    $metrics['yac'] = null;
                }
            }

            if ($metrics['jumpball'] != null) {
                if ($metrics['bully'] != null) {
                    $metrics['contested'] = round((($percentiles['bully'] * .15) + ($percentiles['jumpball'] * .85)),2);
                } else {
                    $metrics['contested'] = round((($percentiles['jumpball'] * .85)),2);
                }
            } else {
                $metrics['contested'] = null;
            }

            // outside X
            if ($metrics['beatPress'] != null && $metrics['separation'] != null && $metrics['contested'] != null && $metrics['yac'] != null) {
                $metrics['outsideX'] = round(($metrics['beatPress'] *.15) + ($metrics['separation'] *.15) + ($metrics['contested'] *.45) + ($metrics['deep'] *.25),2);
            } elseif ($metrics['beatPress'] != null && $metrics['separation'] == null && $metrics['contested'] != null && $metrics['yac'] != null) {
                $metrics['outsideX'] = round(($metrics['beatPress'] *.25) + ($metrics['contested'] *.50) + ($metrics['deep'] *.25),2);
            } else {
                $metrics['outsideX'] = null;
            }

            // penalties
            if ($metrics['outsideX'] !== null) {
                if ($metrics['fortyTime'] > 4.57 && $metrics['beatPress'] < 40) {
                    $metrics['outsideX'] = $metrics['outsideX'] - 5;
                }

                if ($metrics['contested'] < 45 && $metrics['outsideX'] > 50) {
                    $metrics['outsideX'] = $metrics['outsideX'] - 5;
                }

//            if ($metrics['jumpball'] < 135) {
//                $alphaScore = $alphaScore - 5;
//            }

                if ($metrics['jumpball'] < 143) {
                    $metrics['outsideX'] = $metrics['outsideX'] + 1;
                }

                if ($metrics['jumpball'] < 146) {
                    $metrics['outsideX'] = $metrics['outsideX'] + 1;
                }
            }


            // not getting off the press
            if($metrics['bully'] !== null && $metrics['outsideX'] !== null) {
                if ($metrics['bully'] < 15 && $metrics['outsideX'] > 70) {
                    $metrics['outsideX'] = $metrics['outsideX'] - 5;
                }
//
                if ($metrics['bully'] < 9) {
                    $metrics['outsideX'] = $metrics['outsideX'] - 2;
                }

                if ($metrics['bully'] < 13 ) {
                    $metrics['outsideX'] = $metrics['outsideX'] - 2;
                }

                if ($metrics['outsideX'] > 60 && $info['heightInches'] < 72) {
                    $metrics['outsideX'] = $metrics['outsideX'] - 5;
                }

                if ($metrics['outsideX'] > 60 && $info['heightInches'] < 70) {
                    $metrics['outsideX'] = $metrics['outsideX'] - 5;
                }
//
//                if ($metrics['bully'] < 9) {
//                    $metrics['outsideX'] = $metrics['outsideX'] - 3;
//                }
//
                if ($metrics['bully'] > 18) {
                    $metrics['outsideX'] = $metrics['outsideX'] + 3;
                }

                if ($metrics['bully'] > 23 ) {
                    $metrics['outsideX'] = $metrics['outsideX'] + 2;
                }
            }


            // new alpha
            if ($metrics['slot'] != null && $metrics['outsideX'] != null && $metrics['deep'] != null && $metrics['collegeScore'] != null) {
                $halfAlpha = ($metrics['slot'] * .45) + ($metrics['outsideX'] *.40) + ($metrics['deep'] *.20);
                $alphaScore = round(((($metrics['collegeScore']/35) * 100) * .45) + ($halfAlpha * .55), 2);
            } else {
                $alphaScore = null;
            }

            if ($alphaScore !== null && $noForty == false && $noBench == false) {
                if ($alphaScore > 70 && $metrics['slot'] < 60) {
                    $alphaScore = $alphaScore - 5;
                }
//
                if ($alphaScore > 70 && $metrics['deep'] < 60) {
                    $alphaScore = $alphaScore - 5;
                }
//
                if ($alphaScore > 60 && $metrics['slot'] < 35) {
                    $alphaScore = $alphaScore - 5;
                }
//
                if ($alphaScore > 60 && $metrics['deep'] < 35) {
                    $alphaScore = $alphaScore - 5;
                }
//
                if ($alphaScore > 55 && $metrics['beatPress'] < 50) {
                    if ($metrics['slot'] < 50) {
                        $alphaScore = $alphaScore - 7;
                    } else {
                        $alphaScore = $alphaScore - 3.5;
                    }
                }

                if ($alphaScore > 55 && $metrics['beatPress'] < 30) {
                    $alphaScore = $alphaScore - 3;
                }


//
//                if ($metrics['fortyTime'] > 4.57 && $metrics['beatPress'] < 30) {
//                    $alphaScore = $alphaScore - 5;
//                }

//                if ($noBench == false) {
//                    if ($metrics['beatPress'] < 20) {
//                        $alphaScore = $alphaScore -5;
//                    }
//                }
            }



            if ($alphaScore !== null && $noAgility == false) {
                if ($alphaScore > 60 && $metrics['separation'] < 40) {
                    $alphaScore = $alphaScore - 5;
                }

                if ($alphaScore > 50 && $metrics['separation'] < 30) {
                    $alphaScore = $alphaScore - 5;
                }

                if ($metrics['separation'] < 20 && $alphaScore != null) {
                    $alphaScore = $alphaScore - 5;
                }
            }

            // Alpha Score
            /*
             * 40% college base
             * 20% getting off the line (60% bully, 30% speed, 10% juke)
             * 20% seperation (60% route Agility, 40% speed)
             * 20% Jumpball
             */
//
//            $alphaScore = round(((($metrics['collegeScore']/33) * 100) * .5) + ($deep * .25) + ($slot * .25), 2);
//
////            // Penalties


//            // not commanding cushion or running past cb
//            if ($metrics['fortyTime'] > 4.60) {
//                $alphaScore = $alphaScore - 3;
//            }
//
//            if ($metrics['fortyTime'] > 4.70) {
//                $alphaScore = $alphaScore - 5;
//            }Javian
//
//            if ($metrics['fortyTime'] < 4.46) {
//                $alphaScore = $alphaScore + 1;
//            }
//
//            if ($metrics['fortyTime'] < 4.40) {
//                $alphaScore = $alphaScore + 1;
//            }
//
//            //not creating separation
//            if ($metrics['routeAgility'] > 8.60) {
//                $alphaScore = $alphaScore - 7;
//            }
//
//            if ($metrics['routeAgility'] > 8.80) {
//                $alphaScore = $alphaScore - 10;
//            }
//
//            if ($metrics['routeAgility'] < 7.7) {
//                $alphaScore = $alphaScore + 1;
//            }
//
//            if ($metrics['routeAgility'] < 7.5) {
//                $alphaScore = $alphaScore + 2;
//            }
//
////            // not winning contested catches


            $metrics['alpha'] = round($alphaScore,2);

            if ($metrics['alpha'] == 0) {
                $metrics['alpha'] = null;
            }

            if (array_key_exists("bestDominator", $college) && $college['bestDominator'] > 20) {
                if ($college['bestSeason']['recAvg'] < 14.51 && $metrics['slot'] != 0) {
                    if ($noAgility == false) {
                        $metrics['slot'] = $metrics['slot'] + 5;
                    }
                }

                if ($college['bestSeason']['recAvg'] > 17 && $metrics['deep'] != 0) {
                    if ($noForty == false) {
                        $metrics['deep'] = $metrics['deep'] + 5;
                    }
                }

                if ($college['bestSeason']['recAvg'] > 14.51 && $college['bestSeason']['recAvg'] < 17 && $metrics['alpha'] != 0) {
                    if ($metrics['outsideX'] !== null) {
                        $metrics['outsideX'] = $metrics['outsideX'] + 5;
                    }
                }
            }

            $metrics['slot'] = round($metrics['slot'], 2);
            $metrics['deep'] = round($metrics['deep'], 2);
            $metrics['outsideX'] = round($metrics['outsideX'], 2);
            $metrics['alpha'] = round($metrics['alpha'], 2);

            $wr->setMetrics($metrics);

            $this->command->save($wr);

            $pointer++;
            $progressBar->update($pointer);
        }
        $progressBar->finish();
        print "Special Metrics completed\n";
    }

    public function makeCollegeScore($wr)
    {
        $collegeStats = $wr->college_stats;
        unset($collegeStats['Career']);
        if ($wr->getId() == 27445) {
            $gotHim = true;
        }

        $breakout = false;
        $collegeScore = 0;
        $bestDominator = .01;
        $bestSeason = [];
        $lastYear = "";
        $breakoutClass = "None";
        $bestReturn = 0;
        $breakoutSeasons = 0;
        $lastBreakout = 0;
        $i = 0;
        $bonus = 0;
        $lastClass = "";
        $conf = "";
        $bestRush = 0;
        foreach ($collegeStats as $year => $stats) {
            if ($stats->year != "Career") {
                $i++;

                if ($stats['totals']['yds'] == 0 || !array_key_exists('totals', $stats)) {
                    //we don't have team totals so we can't do calculations
                    return [
                        'collegeScore' => null,
                        'bestSeason' => null,
                        'bestReturn' => null,
                        'breakoutClass' => null,
                        'breakoutSeasons' => null,
                        "collegeSeasons" => null,
                        "bestDominator" => null,
                        "updateCollegeStats" => $collegeStats,
                        "bestRush" => $bestRush
                    ];
                }

                // determine dominators
                $dominator['td'] = round(($stats['recTds'] / $stats['totals']['tds'] ) * 100, 2);
                $dominator['yd'] = round(($stats['recYds'] / $stats['totals']['yds']) * 100, 2);
                $dominator['rec'] = round(($stats['recs'] / $stats['totals']['recs']) * 100, 2);

                if ($stats['games'] > 4 && $stats['games'] < 9) {
                    $dominator['td'] = round(($dominator['td']/$stats['games']) * 12,2);
                    $dominator['yd'] = round(($dominator['yd']/$stats['games']) * 12,2);
                    $dominator['rec'] = round(($dominator['rec']/$stats['games']) * 12,2);
                }

                $collegeStats[$year]['dominator'] = round(($dominator['yd'] + $dominator['td'])/2, 2);
                $collegeStats[$year]['tdDominator'] = round($dominator['td'] * 100, 2);
                $collegeStats[$year]['recDominator'] = round($dominator['rec'] * 100, 2);
                $collegeStats[$year]['ydDominator'] = round($dominator['yd'] * 100, 2);
                $breakout = 0;

                if ($dominator['rec'] > 20 && (($dominator['yd'] + $dominator['td'])/2) > 20) {
                    $breakout = 3;
                } else {
                    // get breakout season score
                    foreach($dominator as $type => $score) {
                        if ($score !== 0) {
                            switch (true) {
                                case ($score > (19)):
                                    $breakout = $breakout + 1;
                                    break;
                                case ($score > (15)):
                                    $breakout = $breakout + .5;
                                    break;
                                case ($score > (10)):
                                    $breakout = $breakout + .25;
                                case $breakout;
                                default:
                            }
                        }
                    }
                }

                // add to breakout seasons
                switch ($breakout) {
                    case ($breakout >= 3):
                        $breakoutSeasons = $breakoutSeasons + 1;
                        break;
                    case ($breakout >= 2):
                        $breakoutSeasons = $breakoutSeasons + .5;
                        break;
                    case ($breakout >= 1):
                        $breakoutSeasons = $breakoutSeasons + .25;
                        break;
                    default:
                }

                if ($stats['class'] == $lastClass) {
                    $redshirt = true;
                } else {
                    $redshirt = false;
                }

                // determine breakout class
                if ($breakout == 3 ) {
                    if ($breakoutClass == "None") {
                        if ($i == 1) {
                            if ($stats['class'] == "FR") {
                                $breakoutClass = "True Freshman";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 2) {
                            if ($stats['class'] == "FR") {
                                $breakoutClass = "Redshirt Freshman";
                            } elseif ($stats['class'] == "SO") {
                                $breakoutClass = "Sophomore";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 3) {
                            if ($stats['class'] == "SO") {
                                $breakoutClass = "Redshirt Sophomore";
                            } elseif ($stats['class'] == "JR") {
                                $breakoutClass = "Junior";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 4) {
                            if ($stats['class'] == "JR") {
                                $breakoutClass = "Redshirt Junior";
                            } elseif ($stats['class'] == "SR") {
                                $breakoutClass = "Senior";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 5) {
                            if ($stats['class'] == "SR") {
                                $breakoutClass = "Redshirt Senior";
                            } elseif ($stats['class'] == "SR") {
                                $breakoutClass = "SR";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } else {
                            $breakoutClass = "SR";
                        }
                    }
                }

                // determine best dominator
                $currentDominator = round((array_sum([$dominator['yd'], $dominator['td']])) / 2, 2);
                if ($currentDominator > $bestDominator) {
                    $bestDominator = $currentDominator;
                    $bestSeason = $stats;
                    $bestSeason['ydsDominator'] = $dominator['yd'];
                    $bestSeason['tdsDominator'] = $dominator['td'];
                }

                // determine return dominator
                if (array_key_exists('returnStats', $stats)) {
                    $bestReturn = $stats['returnStats']['puntYds'] + $stats['returnStats']['kickYds'];
                }

                // save last year
                // Best breakout score
                if ($breakout == 3) {
                    switch ($currentDominator) {
                        case $currentDominator >= 50 && $stats['recYds'] > 1000:
                            $collegeScore = $collegeScore + 3;
                            break;
                        case $currentDominator >= 45 && $stats['recYds'] > 1000:
                            $collegeScore = $collegeScore + 2.75;
                            break;
                        case $currentDominator >= 40:
                            $collegeScore = $collegeScore + 2.50;
                            break;
                        case $currentDominator >= 37.51:
                            $collegeScore = $collegeScore + 2.25;
                            break;
                        case $currentDominator >= 35:
                            $collegeScore = $collegeScore + 2;
                            break;
                        case $currentDominator >= 33.51:
                            $collegeScore = $collegeScore + 1.75;
                            break;
                        case $currentDominator >= 30:
                            $collegeScore = $collegeScore + 1.50;
                            break;
                        case $currentDominator >= 25:
                            $collegeScore = $collegeScore + 1.25;
                            break;
                        default:
                    }
                }

                $lastBreakout = $breakout;
                $collegeScore = $collegeScore + $breakout;
                if (array_key_exists('conference', $stats)) {
                    $conf = $stats['conference'];
                    if ($stats['college'] == "Notre Dame") {
                        $conf = "ACC";
                    }
                    $lastYear = $stats['class'];
                }

                if ($stats['recYds'] > 1000) {
                    $bonus = $bonus + 1;
                }

                if (array_key_exists('returnStats', $stats)) {
                    if ($stats['returnStats']['puntYds'] > 100) {
                        $bonus = $bonus + .5;
                    }

                    if ($stats['returnStats']['puntYds'] > 200) {
                        $bonus = $bonus + 1;
                    }

                    if ($stats['returnStats']['kickYds'] > 300) {
                        $bonus = $bonus + .5;
                    }

                    if ($stats['returnStats']['kickYds'] > 600) {
                        $bonus = $bonus + 1;
                    }
                }

                if (array_key_exists('rushYds', $stats)) {

                    if ($stats['rushYds'] > $bestRush) {
                        $bestRush = $stats['rushYds'];
                    }

                    if ($stats['rushYds'] > 100) {
                        $bonus = $bonus + .5;
                    }

                    if ($stats['rushYds'] > 200) {
                        $bonus = $bonus + .5;
                    }

                    if ($stats['rushYds'] > 300) {
                        $bonus = $bonus + .5;
                    }

                    if ($stats['rushYds'] > 400) {
                        $bonus = $bonus + .5;
                    }

                    if ($stats['rushYds'] > 500) {
                        $bonus = $bonus + .5;
                    }

                    if ($stats['rushYds'] > 600) {
                        $bonus = $bonus + .5;
                    }

                    if ($stats['rushYds'] > 700) {
                        $bonus = $bonus + .5;
                    }

                    if ($stats['rushYds'] > 700) {
                        $bonus = $bonus + .5;
                    }
                }

                $collegeTeammates = $this->repository->getCollegeTeammates($stats['year'], $stats['college'], 'WR');
                $collegeStats[$year]['teammates'] = $collegeTeammates;
                foreach ($collegeTeammates as $key => $teammate) {
                    if ($teammate['id'] !== $wr->getId()) {
                        $collegeStats[$year]['teammates'][$key] = $collegeTeammates;
                        if ($teammate['dominator'] > 19 && $currentDominator > 10) {
                            if ($currentDominator < 20) {
                                $bonus = $bonus + 1;
                            } else {
                                $bonus = $bonus + .5;
                            }
                        }
                    }
                }

            }
        }

//        if ($i == 2) {
//            $i = 3;
//        }

        //$collegeScore = round(($breakoutSeasons/$i) * 10, 2);
        // Coming out as a junior, add last breakout to simulate senior season
        if (($lastYear == "JR" || $lastYear == "SO") && $i == 3) {
            $collegeScore = $collegeScore + $lastBreakout + 2;
        }

        $info = $wr->getPlayerInfo();
        if (!array_key_exists(2020, $collegeStats) && array_key_exists('draft_year', $info) && $info['draft_year'] == '2021') {
            $collegeScore = $collegeScore + $lastBreakout + 2;
        }

        /**** Bonuses ****/
        $collegeScore = $collegeScore + $bonus;

        // Breakout class
        if ($breakoutClass == "True Freshman") {
            $power5 = ["ACC", "Big Ten", "SEC", "Big 12", "Pac-12"];
            $minor5 = ["MWC", "American", "CUSA", "MAC", "Sun Belt"];
            if (in_array($conf, $power5) ) {
                $collegeScore = $collegeScore + 9;
            } else {
                $collegeScore = $collegeScore + 7;
            }
        } elseif (in_array($breakoutClass, ["Redshirt Freshman", "SO", "Sophomore"])) {
            $collegeScore = $collegeScore + 5;
        } elseif ($breakoutClass == "JR" || $breakoutClass == "Redshirt Sophomore" || $breakoutClass == "Junior") {
            $collegeScore = $collegeScore + 4;
        } else {
            $collegeScore = $collegeScore + 3;
        }

        //Conference bonus/penalty for not Division 1
        $power5 = ["ACC", "Big Ten", "SEC", "Big 12", "Pac-12"];
        $minor5 = ["MWC", "American", "CUSA", "MAC", "Sun Belt"];
        if (in_array($conf, $power5) ) {
            $collegeScore = $collegeScore + 2;
        } elseif (in_array($conf, $minor5)) {
            $collegeScore = $collegeScore + 0;
        } else {
            if ($collegeScore > 15) {
                $collegeScore = $collegeScore - 2;
            }
        }
//
        // Best breakout score
        if ($lastYear == "SO") {
            switch ($bestDominator) {
                case $bestDominator >= 50:
                    $collegeScore = $collegeScore + 5;
                    break;
                case $bestDominator >= 45:
                    $collegeScore = $collegeScore + 4.5;
                    break;
                case $bestDominator >= 40:
                    $collegeScore = $collegeScore + 4;
                    break;
                case $bestDominator >= 37.51:
                    $collegeScore = $collegeScore + 3.5;
                    break;
                case $bestDominator >= 35:
                    $collegeScore = $collegeScore + 3;
                    break;
                case $bestDominator >= 33.51:
                    $collegeScore = $collegeScore + 2.5;
                    break;
                case $bestDominator >= 30:
                    $collegeScore = $collegeScore + 2;
                    break;
                case $bestDominator >= 25:
                    $collegeScore = $collegeScore + 1.5;
                    break;
                default:
            }
        }

        /*** 2020 opt-out **/
        $playerInfo = $wr->getPlayerInfo();
        if (array_key_exists('draft_year', $playerInfo)
            && $playerInfo['draft_year'] == "2021"
            && !array_key_exists('draft_year', $playerInfo)) {
            $collegeScore = $collegeScore + $lastBreakout;
        }

        if ($breakoutClass == "JR") {
            $breakoutClass = "Junior";
        }

        if ($breakoutClass == "SR") {
            $breakoutClass = "Senior";
        }

        return [
            'collegeScore' => $collegeScore,
            'bestSeason' => $bestSeason,
            'bestReturn' => $bestReturn,
            'breakoutClass' => $breakoutClass,
            'breakoutSeasons' => $breakoutSeasons,
            "collegeSeasons" => $i,
            "bestDominator" => $bestDominator,
            "updateCollegeStats" => $collegeStats,
            "bestRush" => $bestRush
        ];

    }

    public function scrapCollegeJob()
    {
        $wrs = $this->repository->findAllPlayers("WR");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, $wrs->count());
        $pointer = 0;
        $collegePlayers = $this->sisApi->getCollegePlayers('2020');
        $collect = collect($collegePlayers);

        foreach ($wrs as $wr) {
            $wr->decodeJson();
            $metrics = $wr->getMetrics();
            if ($wr->getTeam() == "Rookie" && array_key_exists('collegeScore', $metrics) && $metrics['collegeScore'] == null) {
                $apiInfo = $wr->getApiInfo();
                $playerInfo = $wr->getPlayerInfo();
                $firstName = $wr->getFirstName();
                $lastName = $wr->getLastName();
                $result = $collect->firstWhere('fullName', $firstName." ".$lastName);
                if (empty($result)) {
                    $result = [];
                } else {
                    $playerInfo['birth_date'] = $result['birthdate'];
                    $playerInfo['heightInches'] = $result['height'];
                    $playerInfo['draft_year'] = $result['season'] + 1;
                    $playerInfo['redShirt'] = $result['redShirt'];
                    $apiInfo['cfb_id'] = $result['playerId'];
                    $wr->setApiInfo($apiInfo);
                    $wr->setPlayerInfo($playerInfo);
                }

                $result = $this->scrapCollegeStats($wr);
                if ($result == false) {
                    continue;
                }
            }
            $pointer++;
            $progressBar->update($pointer);
        }
        $progressBar->finish();
    }

    public function scrapCollegeStats($wr)
    {
        $request = new Request();
        $apiInfo = $wr->getApiInfo();
        if (!array_key_exists('cfb-alias', $apiInfo) || $apiInfo['cfb-alias'] == null) {
            $firstName = strtolower($wr->getFirstName());
            $lastName = strtolower($wr->getLastName());
            $cfb = "{$firstName}-{$lastName}-1";
        } else {
            $cfb = $apiInfo['cfb-alias'];
        }
        $request->setUri("https://www.sports-reference.com/cfb/players/{$cfb}.html");

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $dom = new Query($html);
        $results = $dom->execute('#receiving tr');

        $count = count($results);
        if ($count == 0) {
            return false;
        }
        $collegeStats = [];
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(1)->nodeValue;

            if (!empty($firstItem) && $firstItem != 'Year' && $firstItem != 'Overall') {
//                if ($rowChildren->item(1)->nodeValue != $info->college) {
//                    return false;
//                }
                $year = $rowChildren->item(0)->nodeValue;
                $year = str_replace("*", "", $year);
                if (! $rowChildren->item(1)->firstChild instanceof \DOMElement && $year) {
                    return false;
                }
                $collegeHref = $rowChildren->item(1)->firstChild->getAttribute("href");
                $totals = $this->getCollegeTotals($collegeHref);
                $collegeStats[$year]['totals'] = $totals;
                $collegeStats[$year]['year'] = $year;
                $collegeStats[$year]['college'] = $rowChildren->item(1)->nodeValue;
                $collegeStats[$year]['conference'] = $rowChildren->item(2)->nodeValue;
                $collegeStats[$year]['class'] = $rowChildren->item(3)->nodeValue;
                $collegeStats[$year]['position'] = $rowChildren->item(4)->nodeValue;
                $collegeStats[$year]['games'] = $rowChildren->item(5)->nodeValue;
                $collegeStats[$year]['recs'] = $rowChildren->item(6)->nodeValue;
                $collegeStats[$year]['recYds'] = $rowChildren->item(7)->nodeValue;
                $collegeStats[$year]['recAvg'] = $rowChildren->item(8)->nodeValue;
                $collegeStats[$year]['recTds'] = $rowChildren->item(9)->nodeValue;
                $collegeStats[$year]['rushAtt'] = $rowChildren->item(10)->nodeValue;
                $collegeStats[$year]['rushYds'] = $rowChildren->item(11)->nodeValue;
                $collegeStats[$year]['rushAvg'] = $rowChildren->item(12)->nodeValue;
                $collegeStats[$year]['rushTds'] = $rowChildren->item(13)->nodeValue;
            }
            // $result is a DOMElement
        }


        $returns = strpos($html, '<div class="overthrow table_container" id="div_punt_ret">');
        $returnHtml =  substr($html, $returns);

        $dom = new Query($returnHtml);
        $results = $dom->execute('#punt_ret tr');
        $count = count($results);
        $returnStats = [];
        foreach ($results as $k => $result) {
            $rowChildren = $result->childNodes;
            $year = $rowChildren->item(0)->nodeValue;
            $year = str_replace("*", "", $year);
            if ($year > 0.5) {
                if (!array_key_exists('returnYds', $collegeStats[$year]['totals'])){
                    return false;
                }
                $returnStats['puntYds'] = $rowChildren->item(7)->nodeValue;
                $returnStats['puntAvg'] = $rowChildren->item(8)->nodeValue;
                $returnStats['puntTds'] = $rowChildren->item(9)->nodeValue;
                $returnStats['kickYds'] = $rowChildren->item(11)->nodeValue;
                $returnStats['kickAvg'] = $rowChildren->item(12)->nodeValue;
                $returnStats['kickTds'] = $rowChildren->item(13)->nodeValue;
                $collegeStats[$year]['returnStats'] = $returnStats;
            }
        }

        $collegeStats = $this->getSisMissingCollegeStats($wr, $collegeStats);
        $wr->setCollegeStats($collegeStats);
        $this->command->save($wr);
        return true;
    }

    public function getCollegeTotals($href)
    {
        $request = new Request();
        $uri = "https://www.sports-reference.com{$href}";
        $request->setUri($uri);

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $weird = strpos($html, '<div class="table_container is_setup" id="div_rushing_and_receiving">');
        //$pos = ‌‌strpos($html, '<div class="overthrow table_container" id="div_rushing_and_receiving">');
        $newhtml =  substr($html, $weird);

        $dom = new Query($newhtml);
        $results = $dom->execute('#rushing_and_receiving tr');
        $count = count($results);
        $total['recs'] = 0;
        $total['yds'] = 0;
        $total['tds'] = 0;
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(0)->nodeValue;
            if ($firstItem > 0.5) {
                $recs = $rowChildren->item(6)->nodeValue;
                $total['recs'] = $recs + $total['recs'];
                $yds = $rowChildren->item(7)->nodeValue;
                $total['yds'] = $yds + $total['yds'];
                $tds = $rowChildren->item(9)->nodeValue;
                $total['tds'] = $tds + $total['tds'];
            }
        }

        $returns = strpos($html, '<div class="overthrow table_container" id="div_returns">');
        $returnHtml =  substr($html, $returns);

        $domReturn = new Query($returnHtml);
        $results = $domReturn->execute('#returns tr');
        $count = count($results);
        $total['returnYds'] = 0;
        $total['returnTds'] = 0;
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(0)->nodeValue;
            if ($firstItem > 0.5) {
                $puntYds = $rowChildren->item(3)->nodeValue;
                $puntTds = $rowChildren->item(5)->nodeValue;
                $kickYds = $rowChildren->item(7)->nodeValue;
                $kickTds = $rowChildren->item(9)->nodeValue;
                $total['returnYds'] = $total['returnYds'] + $puntYds + $kickYds;
                $total['returnTds'] =  $total['returnTds'] + $puntTds + $kickTds;
            }
        }
        return $total;
    }

    public function getSisMissingCollegeStats($wr, $collegeStats)
    {
        $apiInfo = $wr->getApiInfo();
        if (array_key_exists('cfb_id', $apiInfo) && $apiInfo['cfb_id'] != null) {
            $recSeasons = $this->sisApi->getCollegeStats($apiInfo['cfb_id'], "receiving");
            foreach ($recSeasons as $recSeason) {
                if ($recSeason['teamId'] != null) {
                    $recTotals = $this->sisApi->getCollegeTeamStats($recSeason['season'], $recSeason['teamId'], "receiving");
                    $team = collect($recTotals);
                    $totals['targets'] = $team->sum('targets');
                    $totals['recs'] = $team->sum('recs');
                    $totals['yds'] = $team->sum('yards');
                    $totals['tds'] = $team->sum('td');
                } else {
                    $totals['targets'] = 0;
                    $totals['recs'] = 0;
                    $totals['yds'] = 0;
                    $totals['tds'] = 0;
                }
                $year = $recSeason['season'];
                $collegeStats[$year]['totals'] = $totals;
                $collegeStats[$year]['year'] = $year;
                $collegeStats[$year]['team'] = $recSeason['team'];
                $collegeStats[$year]['games'] = $recSeason['g'];
                $collegeStats[$year]['targets'] = $recSeason['targets'];
                $collegeStats[$year]['recs'] = $recSeason['recs'];
                $collegeStats[$year]['recYds'] = $recSeason['yards'];
                $collegeStats[$year]['recAvg'] = $recSeason['yardsPerRec'];
                $collegeStats[$year]['recTds'] = $recSeason['td'];
            }

            if (array_key_exists('Career', $collegeStats)) {
                unset($collegeStats['Career']);
            }
        }

        return $collegeStats;
    }

    //    public function apiCollegeJob()
//    {
//        $wrs = $this->repository->findAllPlayers("WR");
//        $progressBar = new ProgressBar($this->consoleAdapter, 0, $wrs->count());
//        $pointer = 0;
//
//        foreach ($wrs as $wr) {
//            if ($wr->getId() == 27445) {
//                $wr->decodeJson();
//                $result = $this->getSisCollegeStats($wr);
//                if ($result == false) {
//                    continue;
//                }
//            }
//            $pointer++;
//            $progressBar->update($pointer);
//        }
//        $progressBar->finish();
//    }
//
//    public function getSisCollegeStats($wr)
//    {
//        $apiInfo = $wr->getApiInfo();
//        if (array_key_exists('cfb_id', $apiInfo) && $apiInfo['cfb_id'] != null) {
//            $collegeStats = [];
//            $recSeasons = $this->sisApi->getCollegeStats($apiInfo['cfb_id'], "receiving");
//            foreach ($recSeasons as $recSeason) {
//                if ($recSeason['teamId'] != null) {
//                    $recTotals = $this->sisApi->getCollegeTeamStats($recSeason['season'], $recSeason['teamId'], "receiving");
//                    $team = collect($recTotals);
//                    $totals['targets'] = $team->sum('targets');
//                    $totals['recs'] = $team->sum('recs');
//                    $totals['yds'] = $team->sum('yards');
//                    $totals['tds'] = $team->sum('td');
//                } else {
//                    $totals['targets'] = 0;
//                    $totals['recs'] = 0;
//                    $totals['yds'] = 0;
//                    $totals['tds'] = 0;mysql.infoschema
//                }
//                $year = $recSeason['season'];
//                $collegeStats[$year]['totals'] = $totals;
//                $collegeStats[$year]['year'] = $year;
//                $collegeStats[$year]['team'] = $recSeason['team'];
//                $collegeStats[$year]['games'] = $recSeason['g'];
//                $collegeStats[$year]['targets'] = $recSeason['targets'];
//                $collegeStats[$year]['recs'] = $recSeason['recs'];
//                $collegeStats[$year]['recYds'] = $recSeason['yards'];
//                $collegeStats[$year]['recAvg'] = $recSeason['yardsPerRec'];
//                $collegeStats[$year]['recTds'] = $recSeason['td'];
//                $collegeStats[$year]['rushAtt'] = 0;
//                $collegeStats[$year]['rushYds'] = 0;
//                $collegeStats[$year]['rushAvg'] = 0;
//                $collegeStats[$year]['rushTds'] = 0;
//                $collegeStats[$year]['returnStats'] = [
//                    'kickYds' => 0,
//                    'kickAvg' => 0,
//                    'kickTds' => 0,
//                    'puntYds' => 0,
//                    'puntAvg' => 0,
//                    'puntTds' => 0
//                ];
//            };
//
//            $rushSeasons = $this->sisApi->getCollegeStats($apiInfo['cfb_id'], "rushing");
//            if (!empty($rushSeasons)) {
//                foreach ($rushSeasons as $rushSeason){
//                    $year = $recSeason['season'];
//                    $collegeStats[$year]['rushAtt'] = $rushSeason['att'];
//                    $collegeStats[$year]['rushYds'] = $rushSeason['yards'];
//                    $collegeStats[$year]['rushAvg'] = $rushSeason['yardsPerAtt'];
//                    $collegeStats[$year]['rushTds'] = $rushSeason['td'];
//                }
//            }
//
//            $kickSeasons = $this->sisApi->getCollegeStats($apiInfo['cfb_id'], "kickret");
//            if (!empty($kickSeasons)) {
//                foreach($kickSeasons as $kickSeason) {
//                    $year = $kickSeason['season'];
//                    $collegeStats[$year]['returnStats']['kickYds'] = $kickSeason['yards'];
//                    $collegeStats[$year]['returnStats']['kickAvg'] = $kickSeason['avg'];
//                    $collegeStats[$year]['returnStats']['kickTds'] = $kickSeason['td'];
//                }
//            }
//
//            $puntSeasons = $this->sisApi->getCollegeStats($apiInfo['cfb_id'], "puntret");
//            if (!empty($puntrSeasons)) {
//                foreach($puntSeasons as $puntSeason) {
//                    $year = $puntSeason['season'];
//                    $collegeStats[$year]['returnStats']['puntYds'] = $puntSeason['yards'];
//                    $collegeStats[$year]['returnStats']['puntAvg'] = $puntSeason['avg'];
//                    $collegeStats[$year]['returnStats']['puntTds'] = $puntSeason['td'];
//                }
//            }
//
//            // Run scrapper to get missing info
//            $request = new Request();
//            $apiInfo = $wr->getApiInfo();
//            if (!array_key_exists('cfb-alias', $apiInfo) || $apiInfo['cfb-alias'] == null) {
//                $firstName = strtolower($wr->getFirstName());
//                $lastName = strtolower($wr->getLastName());
//                $cfb = "{$firstName}-{$lastName}-1";
//            } else {
//                $cfb = $apiInfo['cfb-alias'];
//            }
//            $request->setUri("https://www.sports-reference.com/cfb/players/{$cfb}.html");
//
//            $client = new Client();
//            $response = $client->send($request);
//            $html = $response->getBody();
//
//            $dom = new Query($html);
//            $results = $dom->execute('#receiving tr');
//
//            $count = count($results);
//            if ($count == 0) {
//                return false;
//            }
//            foreach ($results as $result) {
//                $rowChildren = $result->childNodes;
//                $firstItem = $rowChildren->item(1)->nodeValue;
//
//                if (!empty($firstItem) && $firstItem != 'Year' && $firstItem != 'Overall') {
////                if ($rowChildren->item(1)->nodeValue != $info->college) {
////                    return false;
////                }
//                    $year = $rowChildren->item(0)->nodeValue;
//                    $year = str_replace("*", "", $year);
//                    if (! $rowChildren->item(1)->firstChild instanceof \DOMElement && $year) {
//                        return false;
//                    }
//
//                    $collegeStats[$year]['year'] = $year;
//                    $collegeStats[$year]['college'] = $rowChildren->item(1)->nodeValue;
//                    $collegeStats[$year]['conference'] = $rowChildren->item(2)->nodeValue;
//                    $collegeStats[$year]['class'] = $rowChildren->item(3)->nodeValue;
//                    $collegeStats[$year]['position'] = $rowChildren->item(4)->nodeValue;
//                }
//            }
//
//
//
//            if (array_key_exists('Career', $collegeStats)) {
//                unset($collegeStats['Career']);
//            }
//
//            $wr->setCollegeStats($collegeStats);
//            $this->command->save($wr);
//            return true;
//        } else {
//            return false;
//        }
//    }
}
