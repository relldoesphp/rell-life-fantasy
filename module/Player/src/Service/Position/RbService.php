<?php
/**
 * Created by IntelliJ IDEA.
 * User: tcook
 * Date: 8/6/19
 * Time: 3:06 PM
 */

namespace Player\Service\Position;

use Player\Model\Player\PlayerCommandInterface;
use Player\Model\Player\PlayerRepositoryInterface;
use Laminas\Db\Adapter\AdapterInterface;
use Laminas\ProgressBar\Adapter\Console;
use Laminas\ProgressBar\ProgressBar;
use Laminas\Db\Sql\Select;
use Laminas\Http\Request;
use Laminas\Http\Client;
use Laminas\Dom\Query;
USE Player\Service\SportsInfoApi;
use Tightenco\Collect\Support\Collection;

class RbService extends ServiceAbstract
{
    private $consoleAdapter;
    private $repository;
    private $command;
    private $db;
    private $sisApi;

    public $specialMetrics = [
        'grinder' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'passCatcher' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'alpha' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'collegeScore' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'bestDominator' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'bestRecDominator' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'inside' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'outside' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
    ];

    public function __construct(
        AdapterInterface $db,
        Console $consoleAdapter,
        PlayerCommandInterface $command,
        PlayerRepositoryInterface $repository,
        SportsInfoApi $sisApi
    )
    {
        parent::__construct($db, $consoleAdapter, $command, $repository, $sisApi);
        $this->repository = $repository;
        $this->command = $command;
        $this->consoleAdapter = $consoleAdapter;
        $this->sisApi = $sisApi;
    }


    public function calculateMetrics()
    {
        parent::calculateMetrics("RB"); // TODO: Change the autogenerated stub
    }

    public function calculatePercentiles()
    {
        parent::calculatePercentiles("RB", $this->percentileMetrics); // TODO: Change the autogenerated stub
    }

    public function calculateSpecialPercentiles()
    {
        parent::calculatePercentiles("RB", $this->specialMetrics);
    }

    public function calculateSpecialScores()
    {
        $rbs = $this->repository->findAllPlayers("RB");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, count($rbs));
        $pointer = 0;
        foreach ($rbs as $rb) {
            $rb->decodeJson();
            if (empty($rb->getMetrics())) {
                continue;
            }

            $info = $rb->getPlayerInfo();
            $metrics = $rb->getMetrics();
            $percentiles = $rb->getPercentiles();

//            if ($rb->getTeam() == "Rookie") {
//                if ($rb->college_stats != null) {
//                    $college = $this->makeCollegeScore($rb);
//                    $metrics['collegeScore'] = $college['collegeScore'];
//                    $metrics['bestSeason'] = $college['bestSeason'];
//                    $metrics['breakoutClass'] = $college['breakoutClass'];
//                    $metrics['breakoutSeasons'] = $college['breakoutSeasons'];
//                    $metrics['collegeSeasons'] = $college['collegeSeasons'];
//                    $metrics['bestDominator'] = $college['bestDominator'];
//                    $metrics["bestYPC"] = $college['bestYPC'];
//                    $metrics["bestCarryDominator"] = $college['bestCarryDominator'];
//                    $metrics['bestRecDominator'] = $college['bestRecDominator'];
//                } else {
//                    $metrics['collegeScore'] = null;
//                    $metrics['bestSeason'] = null;
//                    $metrics['breakoutClass'] = null;
//                    $metrics['breakoutSeasons'] = null;
//                    $metrics['collegeSeasons'] = null;
//                    $metrics['bestDominator'] = null;
//                    $metrics["bestYPC"] = null;
//                    $metrics["bestCarryDominator"] = null;
//                    $metrics['bestRecDominator'] = null;
//                }
//
//                $rb->setMetrics($metrics);
//
//                $this->command->save($rb);
//
//                $pointer++;
//                $progressBar->update($pointer);
//
//                continue;
//            }

            if ($rb->getId() == 4147) {
                $found = true;
            }

            if (in_array($metrics['shuttle'], ["-", "", null])
                && in_array($metrics['cone'], ["-", "", null])) {
                $noAgility = true;
            } else{
                $noAgility = false;
            }

            if (in_array($metrics['verticalJump'], ["-", "", null])
                && in_array($metrics['broadJump'], ["-", "", null])) {
                $noJump = true;
            } else{
                $noJump = false;
            }

            if (in_array($metrics['fortyTime'], ["-", "", null])) {
                $noForty = true;
            } else{
                $noForty = false;
            }

            if (in_array($metrics['benchPress'], ["-", "", null])) {
                $noBench = true;
            } else{
                $noBench = false;
            }

            if (in_array($metrics['verticalJump'], ["-", "", null])) {
                $noVert = true;
            } else {
                $noVert = false;
            }

            if (in_array($metrics['broadJump'], ["-", "", null])) {
                $noBroad = true;
            } else {
                $noBroad = false;
            }

            if (in_array($metrics['shuttle'], ["-", "", null])) {
                $noShuttle = true;
            } else {
                $noShuttle = false;
            }

            if (in_array($metrics["cone"], ["-", "", null])) {
                $noCone = true;
            } else {
                $noCone = false;
            }

            $data['receiver'] = null;
            $data['grinder'] = null;
            $data['inside'] = null;
            $data['outside'] = null;
            $data['alpha'] = null;
            $data['passCatcher'] = null;

            if ($noShuttle == false && $noForty == false && $noBroad == false) {
                if ($percentiles['power'] > $percentiles['elusiveness']) {
                    $data['inside'] = ($percentiles['power'] * .65) + ($percentiles['elusiveness'] * .25) + ($percentiles['jukeAgility'] * .10);
                } else {
                    $data['inside'] = ($percentiles['power'] * .25) + ($percentiles['elusiveness'] * .65) + ($percentiles['jukeAgility'] * .10);
                }
            } elseif ($noShuttle == true && $noForty == false && $noBroad == false) {
                $data['inside'] = ($percentiles['power'] * .90);
            } elseif ($noShuttle == false && $noBroad == true) {
                $data['inside'] = ($percentiles['elusiveness'] * .90);
            } else {
                $data['inside'] = null;
            }

            if ($noForty == false) {
                $data['outside'] = ($percentiles['fortyTime'] * .6) + ($percentiles['speedScore'] * .4);
            } else {
                $data['outside'] = null;
            }

            /** Weight Penalty **/
            if ($info['weight'] < 214 ) {
                if ($data['inside'] > 75) {
                    $data['inside'] = $data['inside'] - 5;
                }
            }

            if ($info['weight'] < 206) {
                if ($data['inside'] > 65) {
                    $data['inside'] = $data['inside'] - 10;
                }
            }

            /*** Make Grinder Base ***/
            // 1. We have elusiveness, power, and speedScore
            if ($noAgility == false && $noForty == false && $noBroad == false) {
                $data['grinder'] = ($percentiles['power'] * .65) + ($percentiles['elusiveness'] * .1) + ($percentiles['speedScore'] * .15);
            }
            // 2. No agility so no elusiveness, just broad jump and speedScore
            if ($noAgility == true && $noForty == false && $noBroad == false) {
                $data['grinder'] = ($percentiles['power'] * .6) + ($percentiles['speedScore'] * .4);
            }

            // 3. Just speedScore
            if ($noAgility == true && $noForty == false && $noBroad == true) {
                $data['grinder'] = $percentiles['speedScore'];
            }

            // 4. Just broadJump
            if ($noAgility == true && $noForty == true && $noJump == false) {
                $data['grinder'] = $percentiles['power'];
            }

            // 5. Just broadJump
            if ($noShuttle == false && $noForty == false && $noBroad == true) {
                $data['grinder'] = ($percentiles['elusiveness'] * .3) + ($percentiles['speedScore'] * .7);;
            }

            /*** Make Receiver Base ***/
            // 1. We have agility scores and forty time
            if ($noAgility == false && $noForty == false) {
                $data['receiver'] = ($percentiles['routeAgility'] * .6) + ($percentiles['jukeAgility'] * .2) + ($percentiles['fortyTime'] * .2);
            }

            // 2. No agility scores just forty time
            if ($noAgility == true && $noForty == false) {
                $data['receiver'] = ($percentiles['fortyTime'] * .7);
            }

            // 3. Agility but no 40 time
            if ($noAgility == false && $noForty == true ) {
                $data['receiver'] = ($percentiles['routeAgility'] * .7) + ($percentiles['jukeAgility'] * .3);
            }

            // 4. If just shuttle w/ 40 but no cone
            if ($noShuttle == false && $noForty == false && $noCone == true) {
                $data['receiver'] = ($percentiles['jukeAgility'] * .3) + ($percentiles['fortyTime'] * .7);
            }

            // 5. If just cone w/ 40 but no shuttle
            if ($noShuttle == true && $noForty == false && $noCone == false) {
                $data['receiver'] = ($percentiles['routeAgility'] * .6) + ($percentiles['fortyTime'] * .4);
            }

            //6. If nothing then null
            if ($noShuttle == true && $noForty == true && $noCone == true) {
                $data['receiver'] = null;
            }

            if (!empty($rb->getCollegeStats())) {
                $collegeStuff = $this->makeCollegeScore($rb);
                $metrics['collegeScore'] = $collegeStuff['collegeScore'];
                $metrics['breakoutSeasons'] = $collegeStuff['breakoutSeasons'];
                $metrics['bestDominator'] = $collegeStuff['bestDominator'];
                $metrics['bestRecDominator'] = $collegeStuff['bestRecDominator'];
                $metrics['collegeSeasons'] = $collegeStuff['collegeSeasons'];
                $metrics['breakoutClass'] = $collegeStuff['breakoutClass'];
                $metrics['bestYPC'] = $collegeStuff['bestYPC'];
                $metrics['bestCarryDominator'] = $collegeStuff['bestCarryDominator'];
                $rb->setCollegeStats($collegeStuff['collegeStats']);

                /*** Use College Stats to adjust scores ***/

 //               $data['receiver'] = $data['receiver'] + $collegeStuff['bestRecDominator'];
                if ($rb->getId() == 26665) {
                    $gotem = true;
                }

                if ($data['receiver'] != null) {
                    if ($collegeStuff['bestRecDominator'] < 9 ) {
                        $data['receiver'] = $data['receiver'] - 5;
                    } else {
                        $data['receiver'] = ($percentiles['bestRecDominator'] * .6) + ($data['receiver'] * .4);
                    }
                }


//                if ($collegeStuff['bestRec'] >= 30) {
//                    $data['receiver'] = $data['receiver'] + 5;
//                }
//
//                if ($collegeStuff['bestRec'] >= 40) {
//                    $data['receiver'] = $data['receiver'] + 5;
//                }
//
                if ($collegeStuff['bestYPC'] < 5.5) {
                    $data['grinder'] = $data['grinder'] - 5;
                }

//                if ($collegeStuff['bestYPC'] < 5) {
//                    $data['grinder'] = $data['grinder'] - 5;
//                }
//
                if ($collegeStuff['bestCarryDominator'] < 30 && $data['grinder'] > 60) {
                    $data['grinder'] = $data['grinder'] - 10;
                }

            } else {
                $metrics['collegeScore'] = null;
                $metrics['breakoutSeasons'] = "N/A";
                $metrics['bestDominator'] = "N/A";
                $metrics['bestRecDominator'] = "N/A";
                $metrics['collegeSeasons'] = "N/A";
                $metrics['bestYPC'] = "N/A";
                $metrics['bestCarryDominator'] = "N/A";
            }

            /** Weight Penalty **/
            if ($info['weight'] < 206 && $data['inside'] != null) {
                if ($data['inside'] > 65) {
                    $data['inside'] = $data['inside'] - 10;
                }
            }

            //Determine type of runner
            if ($data['outside'] != null && $data['inside'] != null) {
                $outside = $data['outside'] - $data['inside'];
                $inside = $data['inside'] - $data['outside'];
                if ($outside > 20) {
                    $runner = ($data['inside'] * .30) + ($data['outside'] * .70);
                } elseif ($inside > 20) {
                    $runner = ($data['inside'] * .70) + ($data['outside'] * .30);
                } else {
                    $runner = ($data['inside'] * .5) + ($data['outside'] * .5);
                }
            }

            /** Receiver penalty **/
            if ($metrics['collegeScore'] != null) {
                if ($data['receiver'] > 60 && $metrics['bestRecDominator'] < 10) {
                    $data['receiver'] = $data['receiver'] - 10;
                }

                if ($data['receiver'] > 60 && $metrics['bestRecDominator'] < 7) {
                    $data['receiver'] = $data['receiver'] - 10;
                }

                if ($data['receiver'] > 60 && $metrics['bestRecDominator'] < 4) {
                    $data['receiver'] = $data['receiver'] - 5;
                }
            }

            if ($metrics['collegeScore'] !== null && $data['inside'] != null && $data['receiver'] != null) {
                if ($data['receiver'] < 30) {
                    $data['alpha'] = ($data['receiver'] * .10) + ($runner * .90);
                } else {
                    $data['alpha'] = ($data['receiver'] * .25) + ($runner * .75);
                }

                $data['alpha'] = round(((($metrics['collegeScore']/30) * 100) * .2) + ($data['alpha'] * .8), 2);

                if ($metrics['bestDominator'] < 14 && $data['alpha'] > 60) {
                    $data['alpha'] = $data['alpha'] - 10;
                }

            } else {
                $data['alpha'] = ($data['receiver'] * .4) + ($data['inside'] * .30) + ($data['outside'] * .30);
            }


            /** Weight Penalty **/
            if ($info['weight'] < 206 && $data['alpha'] != null) {
                if ($data['alpha'] > 70) {
                    $data['alpha'] = $data['alpha'] - 10;
                }
            }


            $metrics['alpha'] = ($data['alpha'] != null) ? round($data['alpha'],2) : null;
            $metrics['passCatcher'] = ($data['receiver']) != null ? round($data['receiver'],2) : null;
            $metrics['grinder'] = ($data['grinder'] != null) ? round($data['grinder'],2) : null;
            $metrics['inside'] = ($data['inside'] != null) ? round($data['inside'], 2) : null;
            $metrics['outside'] = ($data['outside'] != null) ? round($data['outside'], 2) : null;

            if ($metrics['inside'] == null) {
                $metrics['alpha'] = null;
            }

            $rb->setMetrics($metrics);
            $this->command->save($rb);

            $pointer++;
            $progressBar->update($pointer);
        }
        $progressBar->finish();
    }


    public function makeCollegeScore($rb)
    {
        if ($rb->getId() == 5238) {
            $gotHim = true;
        } else {
            $notHIm = true;
        }

        $i = 0;
        $breakout = false;
        $collegeScore = 0;
        $bestDominator = .01;
        $bestSeason = [];
        $lastYear = "";
        $breakoutClass = "None";
        $bestRecDominator = 0;
        $breakoutSeasons = 0;
        $lastBreakout = 0;
        $bestYPC = 0;
        $bestCarryDom = 0;
        $bestRec = 0;
        $conf = "";
        $collegeStats = $rb->getCollegeStats();
        foreach ($collegeStats as $year => $stats) {
            if ($stats->year != "Career") {
                //increment year count
                $i++;

                if ($stats['totals']['yds'] == 0 || !array_key_exists('totals', $stats)) {
                    //we don't have team totals so we can't do calculations
                    return [
                        'collegeScore' => null,
                        'bestSeason' => null,
                        'bestRecDominator' => null,
                        'breakoutClass' => null,
                        'breakoutSeasons' => null,
                        "collegeSeasons" => null,
                        "bestDominator" => null,
                        "bestYPC" => null,
                        "bestCarryDominator" => null,
                        "bestRec" => null,
                        "collegeStats" => $collegeStats,
                    ];
                }

                if (!array_key_exists('rushTds', $stats)) {
                    continue;
                }

                if (!array_key_exists("scrimmageTds", $stats)) {
                    if (!array_key_exists("recTds", $stats)) {
                        $stats["recTds"] = 0;
                    }
                    $stats["scrimmageTds"] = $stats["rushTds"] + $stats['recTds'];
                }

                if (!array_key_exists("scrimmageYds", $stats)) {
                    if (!array_key_exists("recYds", $stats)) {
                        $stats["recYds"] = 0;
                        $stats["recs"] = 0;
                    }
                    $stats["scrimmageYds"] = $stats["rushYds"] + $stats['recYds'];
                }

                if (!array_key_exists("rushAtt", $stats)) {
                    $stats["rushAtt"] = 0;
                    continue;
                }


                // determine dominators
                $dominator['td'] = round(($stats['scrimmageTds'] / $stats['totals']['tds']) * 100, 2);
                $dominator['yd'] = round(($stats['scrimmageYds'] / $stats['totals']['yds']) * 100, 2);
                $dominator['rec'] = round(($stats['recs'] / $stats['totals']['recs']) * 100, 2);
                $dominator['carries'] = round(($stats['rushAtt'] / $stats['totals']['carries']) * 100, 2);

                // save dominators to collegestats
                $collegeStats[$year]['dominator'] = round(($dominator['yd'] + $dominator['td'])/2, 2);
                $collegeStats[$year]['tdDominator'] = round($dominator['td'], 2);
                $collegeStats[$year]['recDominator'] = round($dominator['rec'], 2);
                $collegeStats[$year]['ydDominator'] = round($dominator['yd'], 2);
                $collegeStats[$year]['carryDominator'] = round($dominator['carries'], 2);


                $breakout = 0;

                // determine breakout
                foreach ($dominator as $type => $score) {
                    if ($type == 'td') {
                        if ($score !== 0) {
                            switch (true) {
                                case ($score > 10):
                                    $breakout = $breakout + 1;
                                    break;
                                case ($score > 7):
                                    $breakout = $breakout + .5;
                                    break;
                                default:
                            }
                        }
                    }

                    if ($type == 'yd') {
                        if ($score !== 0) {
                            switch (true) {
                                case ($score > 20):
                                    $breakout = $breakout + 1;
                                    break;
                                case ($score > 15):
                                    $breakout = $breakout + .5;
                                    break;
                                default:
                            }
                        }
                    }
                }

                //update dominate season count
                switch ($breakout) {
                    case 2:
                        $breakoutSeasons = $breakoutSeasons + 1;
                        break;
                    case ($breakout >= 1):
                        $breakoutSeasons = $breakoutSeasons + .5;
                        break;
                    default:
                }

                // determine breakout class
                if ($breakout == 2) {
                    if ($breakoutClass == "None") {
                        if ($i == 1) {
                            if ($stats['class'] == "FR") {
                                $breakoutClass = "True Freshman";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 2) {
                            if ($stats['class'] == "FR") {
                                $breakoutClass = "Redshirt Freshman";
                            } elseif ($stats['class'] == "SO") {
                                $breakoutClass = "Sophomore";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 3) {
                            if ($stats['class'] == "SO") {
                                $breakoutClass = "Redshirt Sophomore";
                            } elseif ($stats['class'] == "JR") {
                                $breakoutClass = "Junior";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 4) {
                            if ($stats['class'] == "JR") {
                                $breakoutClass = "Redshirt Junior";
                            } elseif ($stats['class'] == "SR") {
                                $breakoutClass = "Senior";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } elseif ($i == 5) {
                            if ($stats['class'] == "SR") {
                                $breakoutClass = "Redshirt Senior";
                            } elseif ($stats['class'] == "SR") {
                                $breakoutClass = "SR";
                            } else {
                                $breakoutClass = $stats['class'];
                            }
                        } else {
                            $breakoutClass = "SR";
                        }
                    }
                }

                // determine best dominators and save info
                $currentDominator = round((array_sum([$dominator['yd'], $dominator['td']])) / 2, 2);
                if ($currentDominator > $bestDominator) {
                    $bestDominator = $currentDominator;
                }

                if ($dominator['rec'] > $bestRecDominator) {
                    $bestRecDominator = $dominator['rec'];
                }

                if ($stats['rushAvg'] > $bestYPC) {
                    $bestYPC = $stats['rushAvg'];
                }

                if ($dominator['carries'] > $bestCarryDom) {
                    $bestCarryDom = $dominator['carries'];
                }

                if ($breakout == 3) {
                    switch ($currentDominator) {
                        case $currentDominator >= 40 && $stats['rushYds'] > 1000:
                            $collegeScore = $collegeScore + 3;
                            break;
                        case $currentDominator >= 35 && $stats['rushYds'] > 1000:
                            $collegeScore = $collegeScore + 2.75;
                            break;
                        case $currentDominator >= 30:
                            $collegeScore = $collegeScore + 2.50;
                            break;
                        case $currentDominator >= 27.51:
                            $collegeScore = $collegeScore + 2.25;
                            break;
                        case $currentDominator >= 25:
                            $collegeScore = $collegeScore + 2;
                            break;
                        case $currentDominator >= 20:
                            $collegeScore = $collegeScore + 1.75;
                            break;
                        case $currentDominator >= 15:
                            $collegeScore = $collegeScore + 1.50;
                            break;
                        case $currentDominator >= 10:
                            $collegeScore = $collegeScore + 1.25;
                            break;
                        default:
                    }
                }

                // Best Recbreakout score
                switch ($dominator['rec']) {
                    case $dominator['rec'] >= 15:
                        $collegeScore = $collegeScore + 3;
                        break;
                    case $dominator['rec'] >= 12:
                        $collegeScore = $collegeScore + 2;
                        break;
                    case $dominator['rec'] >= 9:
                        $collegeScore = $collegeScore + 1;
                        break;
                    default:
                }

                if ($stats['recs'] > $bestRec) {
                    $bestRec = $stats['recs'];
                }

                if ($stats['rushAvg'] > 6 && $stats['rushYds'] > 500) {
                    $collegeScore = $collegeScore + 1;
                }

                if ($stats['rushAvg'] > 5 && $stats['rushYds'] > 500) {
                    $collegeScore = $collegeScore - 2;
                }

                if ($stats['rushYds'] > 1200) {
                    $collegeScore = $collegeScore + 2;
                }

                if ($stats['rushYds'] > 2000) {
                    $collegeScore = $collegeScore + 5;
                }

                $collegeScore = $collegeScore + $breakout;

                //save last breakout
                $lastBreakout = $breakout;
                $lastYear = $stats['class'];

                //save conference
                if (array_key_exists('conference', $stats)) {
                    $conf = $stats['conference'];
                    if ($stats['college'] == "Notre Dame") {
                        $conf = "ACC";
                    }
                } else {
                    $conf = "";
                }
            }
        }

        // Coming out as a junior, add last breakout to simulate senior season
        if (($lastYear == "JR" || $lastYear == "SO") && $i == 3) {
            $collegeScore = $collegeScore + $lastBreakout + 2;
        }

        /**** Bonuses ****/

        // Breakout class
        if ($breakoutClass == "True Freshman") {
            $power5 = ["ACC", "Big Ten", "SEC", "Big 12", "Pac-12"];
            $minor5 = ["MWC", "American", "CUSA", "MAC", "Sun Belt"];
            if (in_array($conf, $power5) ) {
                $collegeScore = $collegeScore + 7;
            } else {
                $collegeScore = $collegeScore + 6;
            }
        } elseif (in_array($breakoutClass, ["Redshirt Freshman", "SO", "Sophomore"])) {
            $collegeScore = $collegeScore + 5;
        } elseif (in_array($breakoutClass, ["JR", "Redshirt Sophomore", "Junior"])) {
            $collegeScore = $collegeScore + 4;
        } elseif (in_array($breakoutClass, ["SR", "Redshirt Junior", "Senior"])) {
            $collegeScore = $collegeScore + 3;
        } elseif ($breakoutClass == "Redshirt Senior") {
            $collegeScore = $collegeScore + 1;
        }

        //Conference bonus/penalty for not Division 1
        $power5 = ["ACC", "Big Ten", "SEC", "Big 12", "Pac-12"];
        $minor5 = ["MWC", "American", "CUSA", "MAC", "Sun Belt"];
        if (in_array($conf, $power5)) {
            $collegeScore = $collegeScore + 5;
        } elseif (in_array($conf, $minor5)) {
            $collegeScore = $collegeScore + 0;
        } else {
            $collegeScore = $collegeScore - 5;
        }


        if ($breakoutClass == "JR") {
            $breakoutClass = "Junior";
        }

        if ($breakoutClass == "SR") {
            $breakoutClass = "Senior";
        }

        return [
            'collegeScore' => $collegeScore,
            'bestSeason' => $bestSeason,
            'bestRecDominator' => $bestRecDominator,
            'breakoutClass' => $breakoutClass,
            'breakoutSeasons' => $breakoutSeasons,
            "collegeSeasons" => $i,
            "bestDominator" => $bestDominator,
            "bestYPC" => $bestYPC,
            "bestCarryDominator" => $bestCarryDom,
            "bestRec" => $bestRec,
            "collegeStats" => $collegeStats
        ];
    }

    public function scrapCollegeJob()
    {
        $rbs = $this->repository->findAllPlayers("RB");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, $rbs->count());
        $pointer = 0;
        $collegePlayers = $this->sisApi->getCollegePlayers('2020');
        $collect = collect($collegePlayers);

        foreach ($rbs as $rb) {
            $rb->decodeJson();
            $metrics = $rb->getMetrics();
            if ($rb->getTeam() == "Rookie" && array_key_exists('collegeScore', $metrics) && $metrics['collegeScore'] == null) {
                $rb->decodeJson();
                $apiInfo = $rb->getApiInfo();
                $playerInfo = $rb->getPlayerInfo();
                $firstName = $rb->getFirstName();
                $lastName = $rb->getLastName();
                $result = $collect->firstWhere('fullName', $firstName." ".$lastName);
                if (empty($result)) {
                    $result = [];
                } else {
                    $playerInfo['birth_date'] = $result['birthdate'];
                    $playerInfo['heightInches'] = $result['height'];
                    $playerInfo['draft_year'] = $result['season'] + 1;
                    $playerInfo['redShirt'] = $result['redShirt'];
                    $apiInfo['cfb_id'] = $result['playerId'];
                    $rb->setApiInfo($apiInfo);
                    $rb->setPlayerInfo($playerInfo);
                }
                
                $result = $this->scrapCollegeStats($rb);
                if ($result == false) {
                    continue;
                }
                $pointer++;
                $progressBar->update($pointer);
            }
        }
        $progressBar->finish();
    }



    public function scrapCollegeStats($rb)
    {
        $request = new Request();
        $apiInfo = $rb->getApiInfo();
        if (!array_key_exists('cfb-alias', $apiInfo) || $apiInfo['cfb-alias'] == null) {
            $firstName = strtolower($rb->getFirstName());
            $lastName = strtolower($rb->getLastName());
            $cfb = "{$firstName}-{$lastName}-1";
        } else {
            $cfb = $apiInfo['cfb-alias'];
        }
        $request->setUri("https://www.sports-reference.com/cfb/players/{$cfb}.html");

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $dom = new Query($html);
        $results = $dom->execute('#rushing tr');

        $count = count($results);
        if ($count == 0) {
            return false;
        }
        $collegeStats = [];
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(1)->nodeValue;

            if (!empty($firstItem) && $firstItem != 'Year') {
//                if ($rowChildren->item(1)->nodeValue != $info->college) {
//                    return false;
//                }
                $year = $rowChildren->item(0)->nodeValue;
                $year = str_replace("*", "", $year);
                if ($year == "Career") {
                    continue;
                }
                if (! $rowChildren->item(1)->firstChild instanceof \DOMElement) {
                    return false;
                }
                $collegeHref = $rowChildren->item(1)->firstChild->getAttribute("href");
                try {
                    $totals = $this->getCollegeTotals($collegeHref);
                } catch (\Exception $e) {
                    return false;
                }
                if (!empty($year)) {
                    $collegeStats[$year]['totals'] = $totals;
                    $collegeStats[$year]['year'] = $year;
                    $collegeStats[$year]['college'] = $rowChildren->item(1)->nodeValue;
                    $collegeStats[$year]['conference'] = $rowChildren->item(2)->nodeValue;
                    $collegeStats[$year]['class'] = $rowChildren->item(3)->nodeValue;
                    $collegeStats[$year]['position'] = $rowChildren->item(4)->nodeValue;
                    $collegeStats[$year]['games'] = $rowChildren->item(5)->nodeValue;
                    $collegeStats[$year]['rushAtt'] = $rowChildren->item(6)->nodeValue;
                    $collegeStats[$year]['rushYds'] = $rowChildren->item(7)->nodeValue;
                    $collegeStats[$year]['rushAvg'] = $rowChildren->item(8)->nodeValue;
                    $collegeStats[$year]['rushTds'] = $rowChildren->item(9)->nodeValue;
                    $collegeStats[$year]['recs'] = $rowChildren->item(10)->nodeValue;
                    $collegeStats[$year]['recYds'] = $rowChildren->item(11)->nodeValue;
                    $collegeStats[$year]['recAvg'] = $rowChildren->item(12)->nodeValue;
                    $collegeStats[$year]['recTds'] = $rowChildren->item(13)->nodeValue;
                    $collegeStats[$year]['scrimmageYds'] = $rowChildren->item(15)->nodeValue;
                    $collegeStats[$year]['scrimmageTds'] = $rowChildren->item(16)->nodeValue;
//                    $collegeStats[$year]['ydsDominator'] = (round($collegeStats[$year]['scrimmageYds'] / $totals['yds'], 4)) * 100;
//                    $collegeStats[$year]['recDominator'] = (round($collegeStats[$year]['recs'] / $totals['recs'], 4)) * 100;
//                    $collegeStats[$year]['tdDominator'] = (round($collegeStats[$year]['scrimmageTds'] / $totals['tds'], 4)) * 100;
                }
            }
            // $result is a DOMElement
        }

        $collegeStats = $this->getSisMissingCollegeStats($rb, $collegeStats);
        $rb->setCollegeStats($collegeStats);
        $this->command->save($rb);
        return true;
    }

    public function getCollegeTotals($href)
    {
        $request = new Request();
        $uri = "https://www.sports-reference.com{$href}";
        $request->setUri($uri);

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $dom = new Query($html);
        $results = $dom->execute('#team tr');
        $count = count($results);
        $totals = [];
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(0)->nodeValue;
            if ($firstItem == "Offense") {
                $games = $rowChildren->item(1)->nodeValue;
                $rushing = $rowChildren->item(8)->nodeValue;
                $scrimmage = $rowChildren->item(12)->nodeValue;
                $totals['rushing'] = $games * $rushing;
                $totals['scrimmage'] = $games * $scrimmage;
            }
        }

        $weird = strpos($html, '<div class="overthrow table_container" id="div_rushing_and_receiving">');
        // $pos = ‌‌strpos($html, '<div class="overthrow table_container" id="div_rushing_and_receiving">');
        $newhtml =  substr($html, $weird);

        $dom = new Query($newhtml);
        $results = $dom->execute('#rushing_and_receiving tr');
        $count = count($results);
        $totals['recs'] = 0;
        $totals['yds'] = 0;
        $totals['tds'] = 0;
        $totals['carries'] = 0;
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(0)->nodeValue;
            if ($firstItem > 0.5) {
                $carries = $rowChildren->item(2)->nodeValue;
                $totals['carries'] = $carries + $totals['carries'];
                $recs = $rowChildren->item(6)->nodeValue;
                $totals['recs'] = $recs + $totals['recs'];
                $yds = $rowChildren->item(11)->nodeValue;
                $totals['yds'] = $yds + $totals['yds'];
                $tds = $rowChildren->item(13)->nodeValue;
                $totals['tds'] = $tds + $totals['tds'];
            }
        }

        return $totals;
    }


    public function getSisMissingCollegeStats($wr, $collegeStats)
    {
        $apiInfo = $wr->getApiInfo();
        if (array_key_exists('cfb_id', $apiInfo) && $apiInfo['cfb_id'] != null) {
            $recSeasons = $this->sisApi->getCollegeStats($apiInfo['cfb_id'], "receiving");
            foreach ($recSeasons as $recSeason) {
                if ($recSeason['teamId'] != null) {
                    $recTotals = $this->sisApi->getCollegeTeamStats($recSeason['season'], $recSeason['teamId'], "receiving");
                    $team = collect($recTotals);
                    $totals['targets'] = $team->sum('targets');
                    $totals['recs'] = $team->sum('recs');
                    $totals['yds'] = $team->sum('yards');
                    $totals['tds'] = $team->sum('td');
                } else {
                    $totals['targets'] = 0;
                    $totals['recs'] = 0;
                    $totals['yds'] = 0;
                    $totals['tds'] = 0;
                }
                $year = $recSeason['season'];
                $collegeStats[$year]['totals'] = $totals;
                $collegeStats[$year]['year'] = $year;
                $collegeStats[$year]['team'] = $recSeason['team'];
                $collegeStats[$year]['games'] = $recSeason['g'];
                $collegeStats[$year]['targets'] = $recSeason['targets'];
                $collegeStats[$year]['recs'] = $recSeason['recs'];
                $collegeStats[$year]['recYds'] = $recSeason['yards'];
                $collegeStats[$year]['recAvg'] = $recSeason['yardsPerRec'];
                $collegeStats[$year]['recTds'] = $recSeason['td'];
            }

            $rushSeasons = $this->sisApi->getCollegeStats($apiInfo['cfb_id'], "rushing");
            foreach ($rushSeasons as $rushSeason) {
                if ($rushSeason['teamId'] != null) {
                    $rushTotals = $this->sisApi->getCollegeTeamStats($rushSeason['season'], $rushSeason['teamId'], "rushing");
                    $team = collect($rushTotals);
                    $totals['carries'] = $team->sum('att');
                    $totals['rushing'] = $team->sum('yards');
                    $totals['tds'] = $team->sum('td');
                } else {
                    $totals['rushing'] = 0;
                    $totals['scrimmage'] = 0;
                    $totals['tds'] = 0;
                }
                $year = $rushSeason['season'];
                $collegeStats[$year]['totals']['carries'] = $totals['carries'];
                $collegeStats[$year]['totals']['tds'] = $totals['tds'] + $collegeStats[$year]['totals']['tds'];
                $collegeStats[$year]['totals']['rushing'] = $totals['rushing'];
                $collegeStats[$year]['totals']['scrimmage'] = $totals['rushing'] + $collegeStats[$year]['totals']['yds'];
                $collegeStats[$year]['year'] = $year;
                $collegeStats[$year]['team'] = $rushSeason['team'];
                $collegeStats[$year]['games'] = $rushSeason['g'];
            }

            if (array_key_exists('Career', $collegeStats)) {
                unset($collegeStats['Career']);
            }
        }

        return $collegeStats;
    }
}