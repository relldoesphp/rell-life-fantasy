<?php
/**
 * Created by IntelliJ IDEA.
 * User: tcook
 * Date: 8/10/19
 * Time: 9:38 PM
 */

namespace Player\Service\Position;

use Player\Model\Player\PlayerCommandInterface;
use Player\Model\Player\PlayerRepositoryInterface;
use Zend\Db\Adapter\AdapterInterface;
use Zend\ProgressBar\Adapter\Console;
use Zend\ProgressBar\ProgressBar;
use Zend\Db\Sql\Select;
use Zend\Http\Request;
use Zend\Http\Client;
use Zend\Dom\Query;

class QbService extends ServiceAbstract
{

    public $specialMetrics = [
        'throwVelocity' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'armTalent' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'playmaker' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'mobility' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'depthAdjPct' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'bestYpa' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'bestPct' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ]
    ];

    public $repository;
    public $command;
    public $consoleAdapter;

    public function __construct(AdapterInterface $db, Console $consoleAdapter, PlayerCommandInterface $command, PlayerRepositoryInterface $repository)
    {
        parent::__construct($db, $consoleAdapter, $command, $repository);
        $this->repository = $repository;
        $this->command = $command;
        $this->consoleAdapter = $consoleAdapter;
    }

    public function calculateMetrics($type)
    {
        parent::calculateMetrics("QB"); // TODO: Change the autogenerated stub
    }

    public function calculatePercentiles($type, $array)
    {
        parent::calculatePercentiles("QB", $this->percentileMetrics); // TODO: Change the autogenerated stub
    }

    public function calculateSpecialPercentiles()
    {
        parent::calculatePercentiles("QB", $this->specialMetrics);
    }

    public function calculateSpecialScores()
    {
        $qbs = $this->repository->findAllPlayers("RB");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, count($qbs));
        $pointer = 0;
        foreach ($qbs as $qb) {
            $qb->decodeJson();




            $this->command->save($qb);

            $pointer++;
            $progressBar->update($pointer);
        }
        $progressBar->finish();

    }

}