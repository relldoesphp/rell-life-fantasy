<?php
/**
 * Created by IntelliJ IDEA.
 * User: tcook
 * Date: 8/10/19
 * Time: 9:38 PM
 */

namespace Player\Service\Position;

use Player\Model\Player\PlayerCommandInterface;
use Player\Model\Player\PlayerRepositoryInterface;
use Zend\Db\Adapter\AdapterInterface;
use Zend\Db\Adapter\Driver\ResultInterface;
use Zend\Db\ResultSet\ResultSet;
use Zend\ProgressBar\Adapter\Console;
use Zend\ProgressBar\ProgressBar;
use Zend\Db\Sql\Select;
use Zend\Http\Request;
use Zend\Http\Client;
use Zend\Dom\Query;

class QbService extends ServiceAbstract
{

    public $specialMetrics = [
        'throwVelocity' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'armTalent' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'playmaker' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'mobility' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'depthAdjPct' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'bestYpa' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'bestPct' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ]
    ];

    public $repository;
    public $command;
    public $consoleAdapter;

    public function __construct(AdapterInterface $db, Console $consoleAdapter, PlayerCommandInterface $command, PlayerRepositoryInterface $repository)
    {
        parent::__construct($db, $consoleAdapter, $command, $repository);
        $this->repository = $repository;
        $this->command = $command;
        $this->consoleAdapter = $consoleAdapter;
    }

    public function calculateMetrics()
    {
        parent::calculateMetrics("QB"); // TODO: Change the autogenerated stub
    }

    public function calculatePercentiles()
    {
        parent::calculatePercentiles("QB", $this->percentileMetrics); // TODO: Change the autogenerated stub
    }

    public function calculateSpecialPercentiles()
    {
        parent::calculatePercentiles("QB", $this->specialMetrics);
    }

    public function calculateSpecialScores()
    {
        $qbs = $this->repository->findAllPlayers("QB");
        $progressBar = new ProgressBar($this->consoleAdapter, 0, count($qbs));
        $pointer = 0;
        foreach ($qbs as $qb) {

            if ($qb->getId() == 2678) {
                $got = true;
            }
            $qb->decodeJson();

            $info = $qb->getPlayerInfo();
            $metrics = $qb->getMetrics();
            $percentiles = $qb->getPercentiles();
            $college = $qb->getCollegeStats();
            unset($college['Career']);
            if ($college != null) {
                $bestYds = 0;
                $bestYear = 0;
                $bestRush = 0;
                foreach ($college as $year) {
                    if ($year['ypa'] > 0) {
                        $metrics["depthAdjPct"] = $year['pct'] + round(7.85 * ($year['ypa'] - 8.40), 2);
                        $metrics["bestPct"] = $year['pct'];
                        $metrics["bestYpa"] = $year['ypa'];
                    }

                    if (!array_key_exists('rushYds', $year)) {
                        $bestRush = "";
                    } else {
                        if ($year['rushYds'] > $bestRush) {
                            $bestRush = $year['rushYds'];
                        }
                    }

                }
            } else {
                $metrics["bestPct"] = null;
                $metrics["bestYpa"] = null;
                $metrics["depthAdjPct"] = "";
                $metrics["bestRush"] = null;
                $bestRush = 0;
            }

            if (array_key_exists('throwVelocity', $metrics)) {
                $metrics["throwVelocity"] = str_replace( " mph", "", $metrics['throwVelocity']);
            } else {
                $metrics["throwVelocity"] = "";
            }


            if ($metrics['throwVelocity'] == "") {
                $throwVelocity = 50;
            } else {
                $throwVelocity = round((($metrics['throwVelocity'] * 60) / 40), 2);
            }

            if ($metrics['depthAdjPct'] == "") {
                $depthAdjPct = 50;
            } else {
                $depthAdjPct = round(($metrics['depthAdjPct'] * 1.25), 2);
            }

            if ($metrics['bestPct'] !== null) {
                $bestPct = round($metrics['bestPct'] * 1.25, 2);
                $metrics['armTalent'] = ($throwVelocity * .60) + ($depthAdjPct * .25) + ($year['pct'] * .15);
            } else {
                $metrics['armTalent'] = ($throwVelocity * .40) + ($depthAdjPct * .60);
            }

            $metrics["mobility"] = null;

            if ($percentiles['elusiveness'] != "" && $percentiles['power'] != "" && $percentiles['fortyTime'] != "") {
                $metrics["mobility"] = ($percentiles['elusiveness'] * .30) + ($percentiles['power'] * .30) + ($percentiles['fortyTime'] * .40);
            }

            if ($percentiles['elusiveness'] == "" && $percentiles['power'] != "" && $percentiles['fortyTime'] != "") {
                $metrics["mobility"] = ($percentiles['power'] * .30) + ($percentiles['fortyTime'] * .70);
            }

            if ($percentiles['elusiveness'] == "" && $percentiles['power'] == "" && $percentiles['fortyTime'] != "") {
                $metrics["mobility"] = $percentiles['fortyTime'];
            }

            if ($percentiles['elusiveness'] != "" && $percentiles['power'] != "" && $percentiles['fortyTime'] == "") {
                $metrics["mobility"] = ($percentiles['elusiveness'] * .60) + ($percentiles['power'] * .40);
            }

            if ($metrics["mobility"] == null) {
                if ($bestRush > 0) {
                    switch($bestRush) {
                        case ($bestRush > 1300) :
                            $metrics['mobility'] = 95;
                            break;
                        case ($bestRush > 1150) :
                            $metrics['mobility'] = 90;
                            break;
                        case ($bestRush > 1000) :
                            $metrics['mobility'] = 85;
                            break;
                        case ($bestRush > 800) :
                            $metrics['mobility'] = 80;
                            break;
                        case ($bestRush > 600) :
                            $metrics['mobility'] = 75;
                            break;
                        case ($bestRush > 500) :
                            $metrics['mobility'] = 70;
                            break;
                        default:
                            $metrics['mobility'] = 40;
                        }
                    }
                }

            $metrics["armTalent"] = round($metrics["armTalent"], 2);
            $metrics["mobility"] = round($metrics["mobility"], 2);

            $metrics['playmaker'] = round((($metrics['armTalent'] + $metrics['mobility'])/2), 2);

            $qb->setMetrics($metrics);

            $this->command->save($qb);

            $pointer++;
            $progressBar->update($pointer);
        }
        $progressBar->finish();
    }

    public function scrapCollegeJob()
    {
        $qbs = $this->repository->findAllPlayers("QB");

        $progressBar = new ProgressBar($this->consoleAdapter, 0, $qbs->count());
        $pointer = 0;

        foreach ($qbs as $qb) {
            $qb->decodeJson();
            $result = $this->scrapCollegeStats($qb);
            if ($result == false) {
                $pointer++;
                $progressBar->update($pointer);
                continue;
            }
            $pointer++;
            $progressBar->update($pointer);
        }
        $progressBar->finish();
    }


    public function scrapCollegeStats($qb)
    {
        $info = $qb->getPlayerInfo();
        $api = $qb->getApiInfo();
        $request = new Request();
        if (!array_key_exists("cfbAlias", $api)) {
            $firstName = strtolower($qb->getFirstName());
            $lastName = strtolower($qb->getLastName());
            $cfb = "{$firstName}-{$lastName}-1";
        } else {
            $cfb = $api->cfbAlias;
        }

        $request->setUri("https://www.sports-reference.com/cfb/players/{$cfb}.html");

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $weird = strpos($html, '<div id="all_passing" class="table_wrapper table_controls">');
        $passHtml =  substr($html, $weird);

        $dom = new Query($passHtml);
        $results = $dom->execute('#passing tr');

        $count = count($results);
        if ($count == 0) {
            return false;
        }
        $collegeStats = [];
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(1)->nodeValue;

            if (!empty($firstItem) && $firstItem != 'Year' && $firstItem) {
                if ($firstItem == "Overall") {
                    break;
                }
                $year = $rowChildren->item(0)->nodeValue;
                $year = str_replace("*", "", $year);
                if (! $rowChildren->item(1)->firstChild instanceof \DOMElement) {
                    return false;
                }

                try {
                    $collegeHref = $rowChildren->item(1)->firstChild->getAttribute("href");
                    $totals = $this->getCollegeTotals($collegeHref);
                    $collegeStats[$year]['totals'] = $totals;
                    $collegeStats[$year]['year'] = $year;
                    $collegeStats[$year]['college'] = $rowChildren->item(1)->nodeValue;
                    $collegeStats[$year]['conf'] = $rowChildren->item(2)->nodeValue;
                    $collegeStats[$year]['class'] = $rowChildren->item(3)->nodeValue;
                    $collegeStats[$year]['position'] = $rowChildren->item(4)->nodeValue;
                    $collegeStats[$year]['games'] = $rowChildren->item(5)->nodeValue;
                    $collegeStats[$year]['cmp'] = $rowChildren->item(6)->nodeValue;
                    $collegeStats[$year]['att'] = $rowChildren->item(7)->nodeValue;
                    $collegeStats[$year]['pct'] = $rowChildren->item(8)->nodeValue;
                    $collegeStats[$year]['yds'] = $rowChildren->item(9)->nodeValue;
                    $collegeStats[$year]['ypa'] = $rowChildren->item(10)->nodeValue;
                    $collegeStats[$year]['aypa'] = $rowChildren->item(11)->nodeValue;
                    $collegeStats[$year]['tds'] = $rowChildren->item(12)->nodeValue;
                    $collegeStats[$year]['ints'] = $rowChildren->item(13)->nodeValue;
                    $collegeStats[$year]['rate'] = $rowChildren->item(14)->nodeValue;
                } catch (\Exception $e) {
                    $wrong = $e->getMessage();
                }

            }
            // $result is a DOMElement
        }
        $weird = strpos($html, '<div class="overthrow table_container" id="div_rushing">');
        $rushHtml =  substr($html, $weird);

        $dom = new Query($rushHtml);
        $results = $dom->execute('#rushing tr');

        $count = count($results);
        if ($count != 0) {
            foreach ($results as $result) {
                $rowChildren = $result->childNodes;
                $firstItem = $rowChildren->item(1)->nodeValue;
                if ($firstItem == "Overall") {
                    break;
                }
                if (!empty($firstItem) && $firstItem != 'Year' && $firstItem) {
                    $year = $rowChildren->item(0)->nodeValue;
                    $year = str_replace("*", "", $year);
                    if (! $rowChildren->item(1)->firstChild instanceof \DOMElement) {
                        return false;
                    }
                    $collegeStats[$year]['rushAtt'] = $rowChildren->item(6)->nodeValue;
                    $collegeStats[$year]['rushYds'] = $rowChildren->item(7)->nodeValue;
                    $collegeStats[$year]['rushAvg'] = $rowChildren->item(8)->nodeValue;
                    $collegeStats[$year]['rushTds'] = $rowChildren->item(9)->nodeValue;
                }
                // $result is a DOMElement
            }
        }

        $qb->setCollegeStats($collegeStats);
        $this->command->save($qb);
        true;
    }

    public function getCollegeTotals($href)
    {
        $request = new Request();
        $uri = "https://www.sports-reference.com{$href}";
        $request->setUri($uri);

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $dom = new Query($html);
        $results = $dom->execute('#team tr');
        $count = count($results);
        $totals = [];
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(0)->nodeValue;
            if ($firstItem == "Offense") {
                $games = $rowChildren->item(1)->nodeValue;
                $rushing = $rowChildren->item(8)->nodeValue;
                $scrimmage = $rowChildren->item(12)->nodeValue;
                $totals['rushing'] = $games * $rushing;
                $totals['scrimmage'] = $games * $scrimmage;
            }
        }

        $weird = strpos($html, '<div class="overthrow table_container" id="div_rushing_and_receiving">');
        // $pos = ‌‌strpos($html, '<div class="overthrow table_container" id="div_rushing_and_receiving">');
        $newhtml =  substr($html, $weird);

        $dom = new Query($newhtml);
        $results = $dom->execute('#rushing_and_receiving tr');
        $count = count($results);
        $totals['recs'] = 0;
        $totals['yds'] = 0;
        $totals['tds'] = 0;
        $totals['carries'] = 0;
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(0)->nodeValue;
            if ($firstItem > 0.5) {
                $carries = $rowChildren->item(2)->nodeValue;
                $totals['carries'] = $carries + $totals['carries'];
                $recs = $rowChildren->item(6)->nodeValue;
                $totals['recs'] = $recs + $totals['recs'];
                $yds = $rowChildren->item(11)->nodeValue;
                $totals['yds'] = $yds + $totals['yds'];
                $tds = $rowChildren->item(13)->nodeValue;
                $totals['tds'] = $tds + $totals['tds'];
            }
        }
        return $totals;
    }
}