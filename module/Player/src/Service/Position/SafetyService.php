<?php
/**
 * Created by IntelliJ IDEA.
 * User: tcook
 * Date: 12/21/19
 * Time: 1:45 AM
 */

namespace Player\Service\Position;

use Player\Model\Player\PlayerCommandInterface;
use Player\Model\Player\PlayerRepositoryInterface;
use Zend\Db\Adapter\AdapterInterface;
use Zend\ProgressBar\Adapter\Console;
use Zend\ProgressBar\ProgressBar;
use Zend\Db\Sql\Select;
use Zend\Http\Request;
use Zend\Http\Client;
use Zend\Dom\Query;

class SafetyService extends ServiceAbstract
{
    private $consoleAdapter;
    private $repository;
    private $command;
    private $db;

    public $specialMetrics = [
        'slot' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'deep' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'alpha' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ],
        'collegeScore' => [
            'field' => 'metrics',
            'sort' => 'ASC'
        ]
    ];

    public function __construct(
        AdapterInterface $db,
        Console $consoleAdapter,
        PlayerCommandInterface $command,
        PlayerRepositoryInterface $repository)
    {
        parent::__construct($db, $consoleAdapter, $command, $repository);
        $this->repository = $repository;
        $this->command = $command;
        $this->consoleAdapter = $consoleAdapter;
    }

    public function calculateMetrics($type = "S")
    {
        parent::calculateMetrics("SS");
        parent::calculateMetrics("FS");// TODO: Change the autogenerated stub
    }

    public function calculatePercentiles($type = "S", $array = [])
    {
        parent::calculatePercentiles("SS", $this->percentileMetrics);
        parent::calculatePercentiles("FS", $this->percentileMetrics); // TODO: Change the autogenerated stub
    }

    public function calculateSpecialPercentiles()
    {
        parent::calculatePercentiles("S", $this->specialMetrics);
    }

    public function calculateSpecialScores()
    {

    }

    public function makeCollegeScore($wr)
    {


    }


    public function scrapCollegeJob()
    {
    }

    public function scrapCollegeStats($wr)
    {
        $request = new Request();
        $apiInfo = $wr->getApiInfo();
        if ($wr->getId() == 1785) {
            $githim = true;
        }
        if (!array_key_exists('cfb-alias', $apiInfo) || $apiInfo['cfb-alias'] == null) {
            $firstName = strtolower($wr->getFirstName());
            $lastName = strtolower($wr->getLastName());
            $cfb = "{$firstName}-{$lastName}-1";
        } else {
            $cfb = $apiInfo['cfb-alias'];
        }
        $request->setUri("https://www.sports-reference.com/cfb/players/{$cfb}.html");

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $dom = new Query($html);
        $results = $dom->execute('#receiving tr');

        $count = count($results);
        if ($count == 0) {
            return false;
        }
        $collegeStats = [];
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(1)->nodeValue;

            if (!empty($firstItem) && $firstItem != 'Year' && $firstItem != 'Overall') {
//                if ($rowChildren->item(1)->nodeValue != $info->college) {
//                    return false;
//                }
                $year = $rowChildren->item(0)->nodeValue;
                $year = str_replace("*", "", $year);
                if (! $rowChildren->item(1)->firstChild instanceof \DOMElement && $year) {
                    return false;
                }
                $collegeHref = $rowChildren->item(1)->firstChild->getAttribute("href");
                $totals = $this->getCollegeTotals($collegeHref);
                $collegeStats[$year]['totals'] = $totals;
                $collegeStats[$year]['year'] = $year;
                $collegeStats[$year]['college'] = $rowChildren->item(1)->nodeValue;
                $collegeStats[$year]['conference'] = $rowChildren->item(2)->nodeValue;
                $collegeStats[$year]['class'] = $rowChildren->item(3)->nodeValue;
                $collegeStats[$year]['position'] = $rowChildren->item(4)->nodeValue;
                $collegeStats[$year]['games'] = $rowChildren->item(5)->nodeValue;
                $collegeStats[$year]['recs'] = $rowChildren->item(6)->nodeValue;
                $collegeStats[$year]['recYds'] = $rowChildren->item(7)->nodeValue;
                $collegeStats[$year]['recAvg'] = $rowChildren->item(8)->nodeValue;
                $collegeStats[$year]['recTds'] = $rowChildren->item(9)->nodeValue;
                $collegeStats[$year]['rushes'] = $rowChildren->item(10)->nodeValue;
                $collegeStats[$year]['rushYds'] = $rowChildren->item(11)->nodeValue;
                $collegeStats[$year]['rushAvg'] = $rowChildren->item(12)->nodeValue;
                $collegeStats[$year]['rushTds'] = $rowChildren->item(13)->nodeValue;
            }
            // $result is a DOMElement
        }


        $returns = strpos($html, '<div class="overthrow table_container" id="div_punt_ret">');
        $returnHtml =  substr($html, $returns);

        $dom = new Query($returnHtml);
        $results = $dom->execute('#punt_ret tr');
        $count = count($results);
        $returnStats = [];
        foreach ($results as $k => $result) {
            $rowChildren = $result->childNodes;
            $year = $rowChildren->item(0)->nodeValue;
            $year = str_replace("*", "", $year);
            if ($year > 0.5) {
                if (!array_key_exists('returnYds', $collegeStats[$year]['totals'])){
                    return false;
                }
                $returnStats['puntYds'] = $rowChildren->item(7)->nodeValue;
                $returnStats['puntAvg'] = $rowChildren->item(8)->nodeValue;
                $returnStats['puntTds'] = $rowChildren->item(9)->nodeValue;
                $returnStats['kickYds'] = $rowChildren->item(11)->nodeValue;
                $returnStats['kickAvg'] = $rowChildren->item(12)->nodeValue;
                $returnStats['kickTds'] = $rowChildren->item(13)->nodeValue;
                $collegeStats[$year]['returnStats'] = $returnStats;
            }
        }

        $wr->setCollegeStats($collegeStats);
        $this->command->save($wr);
        return true;
    }

    public function getCollegeTotals($href)
    {
        $request = new Request();
        $uri = "https://www.sports-reference.com{$href}";
        $request->setUri($uri);

        $client = new Client();
        $response = $client->send($request);
        $html = $response->getBody();

        $weird = strpos($html, '<div class="overthrow table_container" id="div_rushing_and_receiving">');
        //$pos = ‌‌strpos($html, '<div class="overthrow table_container" id="div_rushing_and_receiving">');
        $newhtml =  substr($html, $weird);

        $dom = new Query($newhtml);
        $results = $dom->execute('#rushing_and_receiving tr');
        $count = count($results);
        $total['recs'] = 0;
        $total['yds'] = 0;
        $total['tds'] = 0;
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(0)->nodeValue;
            if ($firstItem > 0.5) {
                $recs = $rowChildren->item(6)->nodeValue;
                $total['recs'] = $recs + $total['recs'];
                $yds = $rowChildren->item(7)->nodeValue;
                $total['yds'] = $yds + $total['yds'];
                $tds = $rowChildren->item(9)->nodeValue;
                $total['tds'] = $tds + $total['tds'];
            }
        }

        $returns = strpos($html, '<div class="overthrow table_container" id="div_returns">');
        $returnHtml =  substr($html, $returns);

        $domReturn = new Query($returnHtml);
        $results = $domReturn->execute('#returns tr');
        $count = count($results);
        $total['returnYds'] = 0;
        $total['returnTds'] = 0;
        foreach ($results as $result) {
            $rowChildren = $result->childNodes;
            $firstItem = $rowChildren->item(0)->nodeValue;
            if ($firstItem > 0.5) {
                $puntYds = $rowChildren->item(3)->nodeValue;
                $puntTds = $rowChildren->item(5)->nodeValue;
                $kickYds = $rowChildren->item(7)->nodeValue;
                $kickTds = $rowChildren->item(9)->nodeValue;
                $total['returnYds'] = $total['returnYds'] + $puntYds + $kickYds;
                $total['returnTds'] =  $total['returnTds'] + $puntTds + $kickTds;
            }
        }
        return $total;
    }

}