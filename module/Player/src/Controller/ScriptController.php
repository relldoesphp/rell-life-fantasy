<?php
/**
 * Created by IntelliJ IDEA.
 * User: tcook
 * Date: 3/22/19
 * Time: 8:46 AM
 */

namespace Player\Controller;

use Player\Model\Player;
use Player\Model\Player\PlayerCommandInterface;
use Player\Model\Player\PlayerRepositoryInterface;
use Player\Service\PlayerManager;
use Player\Service\StatsManager;
use Player\Service\TeamManager;
use Laminas\Mvc\Controller\AbstractActionController;
use Laminas\View\Model\ViewModel;


class ScriptController extends AbstractActionController
{
    private $command;
    private $repository;
    private $playerManager;
    private $statsManager;
    private $teamManager;

    public function __construct(
        PlayerCommandInterface $command,
        PlayerRepositoryInterface $repository,
        PlayerManager $playerManager,
        StatsManager $statsManager,
        TeamManager $teamManager
    )
    {
        $this->command = $command;
        $this->repository = $repository;
        $this->playerManager = $playerManager;
        $this->statsManager = $statsManager;
        $this->teamManager = $teamManager;
    }

    public function indexAction()
    {
        return parent::indexAction(); // TODO: Change the autogenerated stub
    }

    public function updateWrMetricsAction()
    {
        $this->playerManager->updateWrMetrics();
    }

    public function updateRbMetricsAction()
    {
        $this->playerManager->updateRbMetrics();
    }

    public function updateTeMetricsAction()
    {
        $this->playerManager->updateTeMetrics();
    }

    public function updateQbMetricsAction()
    {
        $this->playerManager->updateQbMetrics();
    }

    public function updateOLMetricsAction()
    {
        $this->playerManager->updateWrMetrics();
    }

    public function dataScrapperAction()
    {

        $this->playerManager->scrapCollegeJob();
    }

    public function getSleeperStatsAction()
    {
        //$this->statsManager->getSleeperStats("2019");
        $this->statsManager->getSeasonStatsFromGames("2019", "WR");
        $this->statsManager->makeSeasonAverages("WR", "2019");
        $this->statsManager->makeSeasonRanks("WR", "2019");
        $this->statsManager->getSeasonStatsFromGames("2019", "RB");
        $this->statsManager->makeSeasonAverages("RB", "2019");
        $this->statsManager->makeSeasonRanks("RB", "2019");
        $this->statsManager->getSeasonStatsFromGames("2019", "TE");
        $this->statsManager->makeSeasonAverages("TE", "2019");
        $this->statsManager->makeSeasonRanks("TE", "2019");
        $this->statsManager->getSeasonStatsFromGames("2019", "QB");
        $this->statsManager->makeSeasonAverages("QB", "2019");
        $this->statsManager->makeSeasonRanks("QB", "2019");
    }

    public function makeNameJsonAction()
    {
       $json = $this->repository->getPlayerNames('Off');
       file_put_contents('public/data/names.json', json_encode($json));
    }

    public function updateSleeperInfoAction()
    {
        $this->playerManager->updateSleeperInfo();
    }

    public function getSleeperLogsAction()
    {
        $this->statsManager->getSleeperGameLogs("2019");
        $this->statsManager->makeGameLogRanks("RB", "2019");
        $this->statsManager->makeGameLogRanks("TE", "2019");
        $this->statsManager->makeGameLogRanks("QB", "2019");
        $this->statsManager->makeGameLogRanks("WR", "2019");
//
//        $this->statsManager->getSleeperGameLogs("2017");
//        $this->statsManager->makeGameLogRanks("QB", "2017");
//        $this->statsManager->makeGameLogRanks("RB", "2017");
//        $this->statsManager->makeGameLogRanks("TE", "2017");
//        $this->statsManager->makeGameLogRanks("WR", "2017");

//        $this->statsManager->getSleeperGameLogs("2016");
//        $this->statsManager->makeGameLogRanks("QB", "2016");
//        $this->statsManager->makeGameLogRanks("RB", "2016");
//        $this->statsManager->makeGameLogRanks("TE", "2016");
//        $this->statsManager->makeGameLogRanks("QB", "2016");
    }

    public function buildDepthChartsAction()
    {
       $team = $this->teamManager->buildDepthCharts();
    }
}